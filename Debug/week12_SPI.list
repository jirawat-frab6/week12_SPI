
week12_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005ce8  08005ce8  00015ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee0  08005ee0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee8  08005ee8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005ef0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000038  08005f24  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08005f24  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dca5  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d76  00000000  00000000  0002dd09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  0002fa80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d05  00000000  00000000  000316e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a17f  00000000  00000000  000483ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092a5a  00000000  00000000  0005256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  000e5044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005ccc 	.word	0x08005ccc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08005ccc 	.word	0x08005ccc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	0000      	movs	r0, r0
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f000 fe34 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f936 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fae0 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f000 fabe 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e2c:	f000 fa92 	bl	8001354 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000e30:	f000 f9e8 	bl	8001204 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000e34:	f000 f994 	bl	8001160 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e38:	f000 fa1c 	bl	8001274 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000e3c:	f000 fa66 	bl	800130c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000e40:	4881      	ldr	r0, [pc, #516]	; (8001048 <main+0x230>)
 8000e42:	f003 f8b4 	bl	8003fae <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000e46:	4881      	ldr	r0, [pc, #516]	; (800104c <main+0x234>)
 8000e48:	f003 f8d5 	bl	8003ff6 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4980      	ldr	r1, [pc, #512]	; (8001050 <main+0x238>)
 8000e50:	4880      	ldr	r0, [pc, #512]	; (8001054 <main+0x23c>)
 8000e52:	f000 fecf 	bl	8001bf4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	487e      	ldr	r0, [pc, #504]	; (8001058 <main+0x240>)
 8000e5e:	f002 f8a7 	bl	8002fb0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 500)
 8000e62:	f000 fc05 	bl	8001670 <micros>
 8000e66:	460a      	mov	r2, r1
 8000e68:	4601      	mov	r1, r0
 8000e6a:	4b7c      	ldr	r3, [pc, #496]	; (800105c <main+0x244>)
 8000e6c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000e70:	460b      	mov	r3, r1
 8000e72:	4614      	mov	r4, r2
 8000e74:	1b5b      	subs	r3, r3, r5
 8000e76:	eb64 0406 	sbc.w	r4, r4, r6
 8000e7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	42a2      	cmp	r2, r4
 8000e84:	bf08      	it	eq
 8000e86:	4299      	cmpeq	r1, r3
 8000e88:	d2eb      	bcs.n	8000e62 <main+0x4a>
		{
			dataOut += 4096*(frequency*500e-6);
 8000e8a:	4b75      	ldr	r3, [pc, #468]	; (8001060 <main+0x248>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff faf4 	bl	800047c <__aeabi_i2d>
 8000e94:	4604      	mov	r4, r0
 8000e96:	460d      	mov	r5, r1
 8000e98:	4b72      	ldr	r3, [pc, #456]	; (8001064 <main+0x24c>)
 8000e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e9e:	a362      	add	r3, pc, #392	; (adr r3, 8001028 <main+0x210>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff fb54 	bl	8000550 <__aeabi_dmul>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <main+0x250>)
 8000eb6:	f7ff fb4b 	bl	8000550 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	f7ff f98f 	bl	80001e4 <__adddf3>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460c      	mov	r4, r1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f7ff fe01 	bl	8000ad4 <__aeabi_d2uiz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <main+0x248>)
 8000ed8:	801a      	strh	r2, [r3, #0]
			dataOut%=4096;
 8000eda:	4b61      	ldr	r3, [pc, #388]	; (8001060 <main+0x248>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <main+0x248>)
 8000ee6:	801a      	strh	r2, [r3, #0]
			timestamp = micros();
 8000ee8:	f000 fbc2 	bl	8001670 <micros>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	4a5a      	ldr	r2, [pc, #360]	; (800105c <main+0x244>)
 8000ef2:	e9c2 3400 	strd	r3, r4, [r2]
			switch (mode) {
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	; (800106c <main+0x254>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d014      	beq.n	8000f28 <main+0x110>
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d04a      	beq.n	8000f98 <main+0x180>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d000      	beq.n	8000f08 <main+0xf0>
				case sawtooth_mode:output = saw_inverse ? 4095-dataOut:dataOut;break;
				case sine_mode:output = sin(2*M_PI*((float)dataOut/4095))*(4095/2) + (4095/2);break;
				case square_mode:output = dataOut > 4095*(duty_cycle/100) ? 0:4095;break;
				default:break;
 8000f06:	e06f      	b.n	8000fe8 <main+0x1d0>
				case sawtooth_mode:output = saw_inverse ? 4095-dataOut:dataOut;break;
 8000f08:	4b59      	ldr	r3, [pc, #356]	; (8001070 <main+0x258>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <main+0x106>
 8000f10:	4b53      	ldr	r3, [pc, #332]	; (8001060 <main+0x248>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000f18:	330f      	adds	r3, #15
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	e001      	b.n	8000f22 <main+0x10a>
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <main+0x248>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	4a54      	ldr	r2, [pc, #336]	; (8001074 <main+0x25c>)
 8000f24:	8013      	strh	r3, [r2, #0]
 8000f26:	e05f      	b.n	8000fe8 <main+0x1d0>
				case sine_mode:output = sin(2*M_PI*((float)dataOut/4095))*(4095/2) + (4095/2);break;
 8000f28:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <main+0x248>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f34:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001078 <main+0x260>
 8000f38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f3c:	ee16 0a90 	vmov	r0, s13
 8000f40:	f7ff faae 	bl	80004a0 <__aeabi_f2d>
 8000f44:	a33a      	add	r3, pc, #232	; (adr r3, 8001030 <main+0x218>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fb01 	bl	8000550 <__aeabi_dmul>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460c      	mov	r4, r1
 8000f52:	ec44 3b17 	vmov	d7, r3, r4
 8000f56:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5a:	eef0 0a67 	vmov.f32	s1, s15
 8000f5e:	f003 fea3 	bl	8004ca8 <sin>
 8000f62:	ec51 0b10 	vmov	r0, r1, d0
 8000f66:	a334      	add	r3, pc, #208	; (adr r3, 8001038 <main+0x220>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff faf0 	bl	8000550 <__aeabi_dmul>
 8000f70:	4603      	mov	r3, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	4618      	mov	r0, r3
 8000f76:	4621      	mov	r1, r4
 8000f78:	a32f      	add	r3, pc, #188	; (adr r3, 8001038 <main+0x220>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff f931 	bl	80001e4 <__adddf3>
 8000f82:	4603      	mov	r3, r0
 8000f84:	460c      	mov	r4, r1
 8000f86:	4618      	mov	r0, r3
 8000f88:	4621      	mov	r1, r4
 8000f8a:	f7ff fda3 	bl	8000ad4 <__aeabi_d2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <main+0x25c>)
 8000f94:	801a      	strh	r2, [r3, #0]
 8000f96:	e027      	b.n	8000fe8 <main+0x1d0>
				case square_mode:output = dataOut > 4095*(duty_cycle/100) ? 0:4095;break;
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <main+0x248>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fa6d 	bl	800047c <__aeabi_i2d>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <main+0x264>)
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <main+0x268>)
 8000fb2:	f7ff fbf7 	bl	80007a4 <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	a320      	add	r3, pc, #128	; (adr r3, 8001040 <main+0x228>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fac4 	bl	8000550 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f7ff fd4e 	bl	8000a70 <__aeabi_dcmpgt>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <main+0x1c6>
 8000fda:	2200      	movs	r2, #0
 8000fdc:	e001      	b.n	8000fe2 <main+0x1ca>
 8000fde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <main+0x25c>)
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	bf00      	nop
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <main+0x26c>)
 8000fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f47f af36 	bne.w	8000e62 <main+0x4a>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8000ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <main+0x270>)
 8000ffc:	f001 ffc0 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	f47f af2d 	bne.w	8000e62 <main+0x4a>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, clamp_output(output));
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <main+0x274>)
 800100a:	781c      	ldrb	r4, [r3, #0]
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0x25c>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fac5 	bl	80015a0 <clamp_output>
 8001016:	4603      	mov	r3, r0
 8001018:	4619      	mov	r1, r3
 800101a:	4620      	mov	r0, r4
 800101c:	f000 fa84 	bl	8001528 <MCP4922SetOutput>
	{
 8001020:	e71f      	b.n	8000e62 <main+0x4a>
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	d2f1a9fc 	.word	0xd2f1a9fc
 800102c:	3f40624d 	.word	0x3f40624d
 8001030:	54442d18 	.word	0x54442d18
 8001034:	401921fb 	.word	0x401921fb
 8001038:	00000000 	.word	0x00000000
 800103c:	409ffc00 	.word	0x409ffc00
 8001040:	00000000 	.word	0x00000000
 8001044:	40affe00 	.word	0x40affe00
 8001048:	20000070 	.word	0x20000070
 800104c:	20000150 	.word	0x20000150
 8001050:	20000054 	.word	0x20000054
 8001054:	20000108 	.word	0x20000108
 8001058:	40020000 	.word	0x40020000
 800105c:	20000068 	.word	0x20000068
 8001060:	20000060 	.word	0x20000060
 8001064:	20000008 	.word	0x20000008
 8001068:	40b00000 	.word	0x40b00000
 800106c:	20000001 	.word	0x20000001
 8001070:	20000002 	.word	0x20000002
 8001074:	20000062 	.word	0x20000062
 8001078:	457ff000 	.word	0x457ff000
 800107c:	20000010 	.word	0x20000010
 8001080:	40590000 	.word	0x40590000
 8001084:	200000b0 	.word	0x200000b0
 8001088:	40020400 	.word	0x40020400
 800108c:	20000000 	.word	0x20000000

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fdfa 	bl	8004c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <SystemClock_Config+0xc8>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <SystemClock_Config+0xc8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <SystemClock_Config+0xcc>)
 80010da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <SystemClock_Config+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f4:	2310      	movs	r3, #16
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001100:	2308      	movs	r3, #8
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f001 ff65 	bl	8002fe4 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001120:	f000 fac0 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2103      	movs	r1, #3
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f9bf 	bl	80034c4 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800114c:	f000 faaa 	bl	80016a4 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	; 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_ADC1_Init+0x9c>)
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <MX_ADC1_Init+0xa0>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_ADC1_Init+0x9c>)
 800117a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800117e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_ADC1_Init+0x9c>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_ADC1_Init+0x9c>)
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_ADC1_Init+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC1_Init+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_ADC1_Init+0x9c>)
 800119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011c6:	f000 fcd1 	bl	8001b6c <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80011d0:	f000 fa68 	bl	80016a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_ADC1_Init+0x9c>)
 80011e6:	f000 fdf7 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011f0:	f000 fa58 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000108 	.word	0x20000108
 8001200:	40012000 	.word	0x40012000

08001204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_SPI3_Init+0x68>)
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <MX_SPI3_Init+0x6c>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI3_Init+0x68>)
 8001210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_SPI3_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_SPI3_Init+0x68>)
 800121e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001222:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI3_Init+0x68>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_SPI3_Init+0x68>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI3_Init+0x68>)
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI3_Init+0x68>)
 800123a:	2220      	movs	r2, #32
 800123c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SPI3_Init+0x68>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI3_Init+0x68>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_SPI3_Init+0x68>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI3_Init+0x68>)
 8001252:	220a      	movs	r2, #10
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_SPI3_Init+0x68>)
 8001258:	f002 fb26 	bl	80038a8 <HAL_SPI_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001262:	f000 fa1f 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000b0 	.word	0x200000b0
 8001270:	40003c00 	.word	0x40003c00

08001274 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_TIM3_Init+0x90>)
 8001292:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <MX_TIM3_Init+0x94>)
 8001294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM3_Init+0x90>)
 8001298:	2264      	movs	r2, #100	; 0x64
 800129a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM3_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM3_Init+0x90>)
 80012a4:	2264      	movs	r2, #100	; 0x64
 80012a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM3_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_TIM3_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM3_Init+0x90>)
 80012b6:	f002 fe4f 	bl	8003f58 <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80012c0:	f000 f9f0 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <MX_TIM3_Init+0x90>)
 80012d2:	f002 feb4 	bl	800403e <HAL_TIM_ConfigClockSource>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80012dc:	f000 f9e2 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e0:	2320      	movs	r3, #32
 80012e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM3_Init+0x90>)
 80012ee:	f003 f877 	bl	80043e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80012f8:	f000 f9d4 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000070 	.word	0x20000070
 8001308:	40000400 	.word	0x40000400

0800130c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_TIM11_Init+0x40>)
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_TIM11_Init+0x44>)
 8001314:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_TIM11_Init+0x40>)
 8001318:	2264      	movs	r2, #100	; 0x64
 800131a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_TIM11_Init+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_TIM11_Init+0x40>)
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_TIM11_Init+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_TIM11_Init+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM11_Init+0x40>)
 8001338:	f002 fe0e 	bl	8003f58 <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001342:	f000 f9af 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000150 	.word	0x20000150
 8001350:	40014800 	.word	0x40014800

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f003 f896 	bl	80044bc <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f985 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001f0 	.word	0x200001f0
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_DMA_Init+0x3c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2038      	movs	r0, #56	; 0x38
 80013d0:	f001 f88d 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013d4:	2038      	movs	r0, #56	; 0x38
 80013d6:	f001 f8a6 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a43      	ldr	r2, [pc, #268]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <MX_GPIO_Init+0x12c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b36      	ldr	r3, [pc, #216]	; (8001514 <MX_GPIO_Init+0x12c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a35      	ldr	r2, [pc, #212]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <MX_GPIO_Init+0x12c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <MX_GPIO_Init+0x12c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4829      	ldr	r0, [pc, #164]	; (8001518 <MX_GPIO_Init+0x130>)
 8001474:	f001 fd9c 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_GPIO_Init+0x134>)
 8001480:	f001 fd96 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	4825      	ldr	r0, [pc, #148]	; (8001520 <MX_GPIO_Init+0x138>)
 800148a:	f001 fd91 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001494:	4820      	ldr	r0, [pc, #128]	; (8001518 <MX_GPIO_Init+0x130>)
 8001496:	f001 fd8b 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <MX_GPIO_Init+0x13c>)
 80014a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	481c      	ldr	r0, [pc, #112]	; (8001520 <MX_GPIO_Init+0x138>)
 80014b0:	f001 fbe4 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80014b4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <MX_GPIO_Init+0x130>)
 80014ce:	f001 fbd5 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80014d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0x134>)
 80014ec:	f001 fbc6 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_GPIO_Init+0x138>)
 8001508:	f001 fbb8 	bl	8002c7c <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	10210000 	.word	0x10210000

08001528 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	031b      	lsls	r3, r3, #12
 8001542:	b29b      	uxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <MCP4922SetOutput+0x44>)
 8001550:	f001 fd2e 	bl	8002fb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MCP4922SetOutput+0x48>)
 800155e:	f002 fa07 	bl	8003970 <HAL_SPI_Transmit_IT>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400
 8001570:	200000b0 	.word	0x200000b0

08001574 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_SPI_TxCpltCallback+0x24>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d105      	bne.n	8001590 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <HAL_SPI_TxCpltCallback+0x28>)
 800158c:	f001 fd10 	bl	8002fb0 <HAL_GPIO_WritePin>
	}
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000b0 	.word	0x200000b0
 800159c:	40020400 	.word	0x40020400

080015a0 <clamp_output>:
	{
		_micro += 65535;
	}
}

uint16_t clamp_output(uint16_t input){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	double_t low = v_low/3.3*4095,high = v_high/3.3*4095;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <clamp_output+0xc8>)
 80015ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b0:	a329      	add	r3, pc, #164	; (adr r3, 8001658 <clamp_output+0xb8>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f8f5 	bl	80007a4 <__aeabi_ddiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	a327      	add	r3, pc, #156	; (adr r3, 8001660 <clamp_output+0xc0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe ffc2 	bl	8000550 <__aeabi_dmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <clamp_output+0xcc>)
 80015d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015da:	a31f      	add	r3, pc, #124	; (adr r3, 8001658 <clamp_output+0xb8>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f8e0 	bl	80007a4 <__aeabi_ddiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4618      	mov	r0, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	a31c      	add	r3, pc, #112	; (adr r3, 8001660 <clamp_output+0xc0>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7fe ffad 	bl	8000550 <__aeabi_dmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	460c      	mov	r4, r1
 80015fa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return (uint16_t)((high-low)*((double)input/4095) + low);
 80015fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001606:	f7fe fdeb 	bl	80001e0 <__aeabi_dsub>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	4625      	mov	r5, r4
 8001610:	461c      	mov	r4, r3
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff21 	bl	800045c <__aeabi_ui2d>
 800161a:	a311      	add	r3, pc, #68	; (adr r3, 8001660 <clamp_output+0xc0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f8c0 	bl	80007a4 <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800163c:	f7fe fdd2 	bl	80001e4 <__adddf3>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	4618      	mov	r0, r3
 8001646:	4621      	mov	r1, r4
 8001648:	f7ff fa44 	bl	8000ad4 <__aeabi_d2uiz>
 800164c:	4603      	mov	r3, r0
 800164e:	b29b      	uxth	r3, r3

}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	66666666 	.word	0x66666666
 800165c:	400a6666 	.word	0x400a6666
 8001660:	00000000 	.word	0x00000000
 8001664:	40affe00 	.word	0x40affe00
 8001668:	20000018 	.word	0x20000018
 800166c:	20000020 	.word	0x20000020

08001670 <micros>:

inline uint64_t micros()
{
 8001670:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001674:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <micros+0x2c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <micros+0x30>)
 8001684:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001688:	eb1b 0301 	adds.w	r3, fp, r1
 800168c:	eb4c 0402 	adc.w	r4, ip, r2
}
 8001690:	4618      	mov	r0, r3
 8001692:	4621      	mov	r1, r4
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800169a:	4770      	bx	lr
 800169c:	20000150 	.word	0x20000150
 80016a0:	20000058 	.word	0x20000058

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016aa:	e7fe      	b.n	80016aa <Error_Handler+0x6>

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <HAL_MspInit+0x4c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ea:	2007      	movs	r0, #7
 80016ec:	f000 fef4 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <HAL_ADC_MspInit+0xdc>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d157      	bne.n	80017ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_ADC_MspInit+0xe0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	481d      	ldr	r0, [pc, #116]	; (80017e0 <HAL_ADC_MspInit+0xe4>)
 800176a:	f001 fa87 	bl	8002c7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_ADC_MspInit+0xec>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001794:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 8001798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017b4:	f000 fed2 	bl	800255c <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017be:	f7ff ff71 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_ADC_MspInit+0xe8>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40012000 	.word	0x40012000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	20000190 	.word	0x20000190
 80017e8:	40026410 	.word	0x40026410

080017ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_SPI_MspInit+0x94>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d133      	bne.n	8001876 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_SPI_MspInit+0x98>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_SPI_MspInit+0x98>)
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_SPI_MspInit+0x98>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_SPI_MspInit+0x98>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_SPI_MspInit+0x98>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_SPI_MspInit+0x98>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001846:	2338      	movs	r3, #56	; 0x38
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001856:	2306      	movs	r3, #6
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <HAL_SPI_MspInit+0x9c>)
 8001862:	f001 fa0b 	bl	8002c7c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2033      	movs	r0, #51	; 0x33
 800186c:	f000 fe3f 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001870:	2033      	movs	r0, #51	; 0x33
 8001872:	f000 fe58 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40003c00 	.word	0x40003c00
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_TIM_Base_MspInit+0x64>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80018ba:	e012      	b.n	80018e2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_TIM_Base_MspInit+0x6c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10d      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_TIM_Base_MspInit+0x68>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40014800 	.word	0x40014800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_UART_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12b      	bne.n	8001976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_UART_MspInit+0x88>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_UART_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001956:	230c      	movs	r3, #12
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001966:	2307      	movs	r3, #7
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_UART_MspInit+0x8c>)
 8001972:	f001 f983 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40004400 	.word	0x40004400
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f8a8 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <SPI3_IRQHandler+0x10>)
 80019e6:	f002 f845 	bl	8003a74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200000b0 	.word	0x200000b0

080019f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA2_Stream0_IRQHandler+0x10>)
 80019fa:	f000 fed7 	bl	80027ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000190 	.word	0x20000190

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <SystemInit+0x28>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <SystemInit+0x28>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SystemInit+0x28>)
 8001a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a22:	609a      	str	r2, [r3, #8]
#endif
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3a:	e003      	b.n	8001a44 <LoopCopyDataInit>

08001a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a42:	3104      	adds	r1, #4

08001a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a4c:	d3f6      	bcc.n	8001a3c <CopyDataInit>
  ldr  r2, =_sbss
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a50:	e002      	b.n	8001a58 <LoopFillZerobss>

08001a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a54:	f842 3b04 	str.w	r3, [r2], #4

08001a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a5c:	d3f9      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a5e:	f7ff ffd3 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f003 f8f5 	bl	8004c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff f9d7 	bl	8000e18 <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a70:	08005ef0 	.word	0x08005ef0
  ldr  r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a78:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8001a7c:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8001a80:	20000234 	.word	0x20000234

08001a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_Init+0x40>)
 8001a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_Init+0x40>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x40>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 fd11 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fdf6 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fd29 	bl	8002542 <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 fcf1 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000028 	.word	0x20000028
 8001b24:	20000030 	.word	0x20000030
 8001b28:	2000002c 	.word	0x2000002c

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000030 	.word	0x20000030
 8001b50:	20000230 	.word	0x20000230

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000230 	.word	0x20000230

08001b6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e033      	b.n	8001bea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fdb6 	bl	80016fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb2:	f023 0302 	bic.w	r3, r3, #2
 8001bb6:	f043 0202 	orr.w	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fa3c 	bl	800203c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bda:	e001      	b.n	8001be0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x1e>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e0b1      	b.n	8001d76 <HAL_ADC_Start_DMA+0x182>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d018      	beq.n	8001c5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_ADC_Start_DMA+0x18c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_ADC_Start_DMA+0x190>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0c9a      	lsrs	r2, r3, #18
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f9      	bne.n	8001c4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 8085 	bne.w	8001d74 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f023 0206 	bic.w	r2, r3, #6
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cb6:	e002      	b.n	8001cbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_ADC_Start_DMA+0x194>)
 8001cc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_ADC_Start_DMA+0x198>)
 8001cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <HAL_ADC_Start_DMA+0x19c>)
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_ADC_Start_DMA+0x1a0>)
 8001ce0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	334c      	adds	r3, #76	; 0x4c
 8001d16:	4619      	mov	r1, r3
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f000 fccc 	bl	80026b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11c      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	e013      	b.n	8001d74 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_ADC_Start_DMA+0x1a4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10e      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x180>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d72:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000028 	.word	0x20000028
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	40012300 	.word	0x40012300
 8001d8c:	08002235 	.word	0x08002235
 8001d90:	080022ef 	.word	0x080022ef
 8001d94:	0800230b 	.word	0x0800230b
 8001d98:	40012000 	.word	0x40012000

08001d9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1c>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e113      	b.n	800201c <HAL_ADC_ConfigChannel+0x244>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d925      	bls.n	8001e50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68d9      	ldr	r1, [r3, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	3b1e      	subs	r3, #30
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43da      	mvns	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	400a      	ands	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68d9      	ldr	r1, [r3, #12]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4403      	add	r3, r0
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	409a      	lsls	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	e022      	b.n	8001e96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	2207      	movs	r2, #7
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6919      	ldr	r1, [r3, #16]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4403      	add	r3, r0
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d824      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b05      	subs	r3, #5
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b05      	subs	r3, #5
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	e04c      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d824      	bhi.n	8001f3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b23      	subs	r3, #35	; 0x23
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b23      	subs	r3, #35	; 0x23
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	e023      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b41      	subs	r3, #65	; 0x41
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b41      	subs	r3, #65	; 0x41
 8001f76:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_ADC_ConfigChannel+0x250>)
 8001f84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a28      	ldr	r2, [pc, #160]	; (800202c <HAL_ADC_ConfigChannel+0x254>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d8>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b12      	cmp	r3, #18
 8001f96:	d10b      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_ADC_ConfigChannel+0x254>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12b      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x23a>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_ADC_ConfigChannel+0x258>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <HAL_ADC_ConfigChannel+0x1f4>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b11      	cmp	r3, #17
 8001fca:	d122      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_ADC_ConfigChannel+0x258>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d111      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_ADC_ConfigChannel+0x25c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x260>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9a      	lsrs	r2, r3, #18
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002004:	e002      	b.n	800200c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40012300 	.word	0x40012300
 800202c:	40012000 	.word	0x40012000
 8002030:	10000012 	.word	0x10000012
 8002034:	20000028 	.word	0x20000028
 8002038:	431bde83 	.word	0x431bde83

0800203c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002044:	4b79      	ldr	r3, [pc, #484]	; (800222c <ADC_Init+0x1f0>)
 8002046:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	021a      	lsls	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	4a58      	ldr	r2, [pc, #352]	; (8002230 <ADC_Init+0x1f4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	e00f      	b.n	800213a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002138:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0202 	bic.w	r2, r2, #2
 8002148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	005a      	lsls	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002176:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002186:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	3b01      	subs	r3, #1
 8002194:	035a      	lsls	r2, r3, #13
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e007      	b.n	80021b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	051a      	lsls	r2, r3, #20
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f2:	025a      	lsls	r2, r3, #9
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	029a      	lsls	r2, r3, #10
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40012300 	.word	0x40012300
 8002230:	0f000001 	.word	0x0f000001

08002234 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13c      	bne.n	80022c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d12b      	bne.n	80022c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226c:	2b00      	cmp	r3, #0
 800226e:	d127      	bne.n	80022c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002288:	2b00      	cmp	r3, #0
 800228a:	d119      	bne.n	80022c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0220 	bic.w	r2, r2, #32
 800229a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fd6b 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022c6:	e00e      	b.n	80022e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fd75 	bl	8001dc4 <HAL_ADC_ErrorCallback>
}
 80022da:	e004      	b.n	80022e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fd57 	bl	8001db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff fd4a 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff faf4 	bl	8001b54 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e099      	b.n	80026ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e00f      	b.n	80025ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7ff fadb 	bl	8001b54 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d908      	bls.n	80025ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e078      	b.n	80026ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e8      	bne.n	800259a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_DMA_Init+0x158>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2b04      	cmp	r3, #4
 8002612:	d107      	bne.n	8002624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	4313      	orrs	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b04      	cmp	r3, #4
 800264c:	d117      	bne.n	800267e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa91 	bl	8002b88 <DMA_CheckFifoParam>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800267a:	2301      	movs	r3, #1
 800267c:	e016      	b.n	80026ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa48 	bl	8002b1c <DMA_CalcBaseAndBitshift>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	223f      	movs	r2, #63	; 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	f010803f 	.word	0xf010803f

080026b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_DMA_Start_IT+0x26>
 80026da:	2302      	movs	r3, #2
 80026dc:	e040      	b.n	8002760 <HAL_DMA_Start_IT+0xa8>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d12f      	bne.n	8002752 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9da 	bl	8002ac0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	223f      	movs	r2, #63	; 0x3f
 8002712:	409a      	lsls	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0216 	orr.w	r2, r2, #22
 8002726:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e005      	b.n	800275e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800275e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d004      	beq.n	8002786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00c      	b.n	80027a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2205      	movs	r2, #5
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b8:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <HAL_DMA_IRQHandler+0x258>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a92      	ldr	r2, [pc, #584]	; (8002a08 <HAL_DMA_IRQHandler+0x25c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a9b      	lsrs	r3, r3, #10
 80027c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2208      	movs	r2, #8
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d013      	beq.n	8002818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2204      	movs	r2, #4
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d012      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2204      	movs	r2, #4
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2210      	movs	r2, #16
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d043      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d03c      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2210      	movs	r2, #16
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d018      	beq.n	80028ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e01f      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e016      	b.n	800291c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0208 	bic.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2220      	movs	r2, #32
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 808e 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8086 	beq.w	8002a4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002942:	2220      	movs	r2, #32
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b05      	cmp	r3, #5
 8002954:	d136      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_IRQHandler+0x1da>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	223f      	movs	r2, #63	; 0x3f
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d07d      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
        }
        return;
 80029c2:	e078      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d030      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e02b      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e022      	b.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
 8002a04:	20000028 	.word	0x20000028
 8002a08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0210 	bic.w	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d032      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d022      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d307      	bcc.n	8002a92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f2      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x2ca>
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ab6:	bf00      	nop
    }
  }
}
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop

08002ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002adc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d108      	bne.n	8002b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002afe:	e007      	b.n	8002b10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3b10      	subs	r3, #16
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <DMA_CalcBaseAndBitshift+0x68>)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d909      	bls.n	8002b5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b5c:	e007      	b.n	8002b6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	aaaaaaab 	.word	0xaaaaaaab
 8002b84:	08005d00 	.word	0x08005d00

08002b88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11f      	bne.n	8002be2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d855      	bhi.n	8002c54 <DMA_CheckFifoParam+0xcc>
 8002ba8:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <DMA_CheckFifoParam+0x28>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd3 	.word	0x08002bd3
 8002bb8:	08002bc1 	.word	0x08002bc1
 8002bbc:	08002c55 	.word	0x08002c55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d045      	beq.n	8002c58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e042      	b.n	8002c58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bda:	d13f      	bne.n	8002c5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e03c      	b.n	8002c5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d121      	bne.n	8002c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d836      	bhi.n	8002c60 <DMA_CheckFifoParam+0xd8>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <DMA_CheckFifoParam+0x70>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c0f 	.word	0x08002c0f
 8002c00:	08002c09 	.word	0x08002c09
 8002c04:	08002c21 	.word	0x08002c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e02f      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d024      	beq.n	8002c64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e021      	b.n	8002c64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c28:	d11e      	bne.n	8002c68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2e:	e01b      	b.n	8002c68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <DMA_CheckFifoParam+0xb4>
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d003      	beq.n	8002c42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c3a:	e018      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e015      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      break;
 8002c52:	e00b      	b.n	8002c6c <DMA_CheckFifoParam+0xe4>
      break;
 8002c54:	bf00      	nop
 8002c56:	e00a      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e008      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c5c:	bf00      	nop
 8002c5e:	e006      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c60:	bf00      	nop
 8002c62:	e004      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c64:	bf00      	nop
 8002c66:	e002      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;   
 8002c68:	bf00      	nop
 8002c6a:	e000      	b.n	8002c6e <DMA_CheckFifoParam+0xe6>
      break;
 8002c6c:	bf00      	nop
    }
  } 
  
  return status; 
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e159      	b.n	8002f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8148 	bne.w	8002f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d007      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0xfc>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b12      	cmp	r3, #18
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <HAL_GPIO_Init+0x2e4>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a55      	ldr	r2, [pc, #340]	; (8002f60 <HAL_GPIO_Init+0x2e4>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_GPIO_Init+0x2e4>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a48      	ldr	r2, [pc, #288]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x202>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x1fe>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a46      	ldr	r2, [pc, #280]	; (8002f70 <HAL_GPIO_Init+0x2f4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x1fa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a45      	ldr	r2, [pc, #276]	; (8002f74 <HAL_GPIO_Init+0x2f8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a44      	ldr	r2, [pc, #272]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x1f2>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4934      	ldr	r1, [pc, #208]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec2:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f aea2 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	3724      	adds	r7, #36	; 0x24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40020800 	.word	0x40020800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc0:	787b      	ldrb	r3, [r7, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e25b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d075      	beq.n	80030ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	4ba3      	ldr	r3, [pc, #652]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00c      	beq.n	8003028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d112      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b99      	ldr	r3, [pc, #612]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05b      	beq.n	80030ec <HAL_RCC_OscConfig+0x108>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d157      	bne.n	80030ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e236      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x74>
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a87      	ldr	r2, [pc, #540]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 800307c:	4b84      	ldr	r3, [pc, #528]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a83      	ldr	r2, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fd5a 	bl	8001b54 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fd56 	bl	8001b54 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1fb      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fd46 	bl	8001b54 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fd42 	bl	8001b54 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1e7      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0xe8>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1bb      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b56      	ldr	r3, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4952      	ldr	r1, [pc, #328]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	e03a      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fcfb 	bl	8001b54 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe fcf7 	bl	8001b54 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e19c      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4940      	ldr	r1, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fcda 	bl	8001b54 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fe fcd6 	bl	8001b54 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e17b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d030      	beq.n	8003230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fcba 	bl	8001b54 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fe fcb6 	bl	8001b54 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e15b      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x200>
 8003202:	e015      	b.n	8003230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fca3 	bl	8001b54 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe fc9f 	bl	8001b54 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e144      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a0 	beq.w	800337e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d121      	bne.n	80032be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003286:	f7fe fc65 	bl	8001b54 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e011      	b.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
 800329c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe fc58 	bl	8001b54 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0fd      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCC_OscConfig+0x4d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
 80032c6:	4b7d      	ldr	r3, [pc, #500]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a7c      	ldr	r2, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x312>
 80032dc:	4b77      	ldr	r3, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a76      	ldr	r2, [pc, #472]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	4b74      	ldr	r3, [pc, #464]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a73      	ldr	r2, [pc, #460]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032f6:	4b71      	ldr	r3, [pc, #452]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a70      	ldr	r2, [pc, #448]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	4b6e      	ldr	r3, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a6d      	ldr	r2, [pc, #436]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7fe fc1d 	bl	8001b54 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fc19 	bl	8001b54 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0bc      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x33a>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fc07 	bl	8001b54 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fc03 	bl	8001b54 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0a6      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b56      	ldr	r3, [pc, #344]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b52      	ldr	r3, [pc, #328]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8092 	beq.w	80034ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d05c      	beq.n	800344e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d141      	bne.n	8003420 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fbd7 	bl	8001b54 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fbd3 	bl	8001b54 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e078      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	4933      	ldr	r1, [pc, #204]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fbac 	bl	8001b54 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fba8 	bl	8001b54 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e04d      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x41c>
 800341e:	e045      	b.n	80034ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x4dc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fb95 	bl	8001b54 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fb91 	bl	8001b54 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e036      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x44a>
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e029      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_OscConfig+0x4d8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	429a      	cmp	r2, r3
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003482:	4013      	ands	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003488:	4293      	cmp	r3, r2
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d106      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000
 80034bc:	40023800 	.word	0x40023800
 80034c0:	42470060 	.word	0x42470060

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0cc      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b68      	ldr	r3, [pc, #416]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e067      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4934      	ldr	r1, [pc, #208]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe face 	bl	8001b54 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe faca 	bl	8001b54 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4601      	mov	r1, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	5cd3      	ldrb	r3, [r2, r3]
 800365e:	fa21 f303 	lsr.w	r3, r1, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fa2e 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	08005ce8 	.word	0x08005ce8
 8003688:	20000028 	.word	0x20000028
 800368c:	2000002c 	.word	0x2000002c

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d007      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x32>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d008      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x38>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 80b4 	bne.w	8003824 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036be:	60bb      	str	r3, [r7, #8]
       break;
 80036c0:	e0b3      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036c4:	60bb      	str	r3, [r7, #8]
      break;
 80036c6:	e0b0      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d04a      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea03 0501 	and.w	r5, r3, r1
 80036f4:	ea04 0602 	and.w	r6, r4, r2
 80036f8:	4629      	mov	r1, r5
 80036fa:	4632      	mov	r2, r6
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	0154      	lsls	r4, r2, #5
 8003706:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	4619      	mov	r1, r3
 800370e:	4622      	mov	r2, r4
 8003710:	1b49      	subs	r1, r1, r5
 8003712:	eb62 0206 	sbc.w	r2, r2, r6
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f04f 0400 	mov.w	r4, #0
 800371e:	0194      	lsls	r4, r2, #6
 8003720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	1a5b      	subs	r3, r3, r1
 8003728:	eb64 0402 	sbc.w	r4, r4, r2
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	00e2      	lsls	r2, r4, #3
 8003736:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	195b      	adds	r3, r3, r5
 8003742:	eb44 0406 	adc.w	r4, r4, r6
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	0262      	lsls	r2, r4, #9
 8003750:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003754:	0259      	lsls	r1, r3, #9
 8003756:	460b      	mov	r3, r1
 8003758:	4614      	mov	r4, r2
 800375a:	4618      	mov	r0, r3
 800375c:	4621      	mov	r1, r4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	f7fd f9d4 	bl	8000b14 <__aeabi_uldivmod>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e049      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	f04f 0400 	mov.w	r4, #0
 800377e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	ea03 0501 	and.w	r5, r3, r1
 800378a:	ea04 0602 	and.w	r6, r4, r2
 800378e:	4629      	mov	r1, r5
 8003790:	4632      	mov	r2, r6
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	0154      	lsls	r4, r2, #5
 800379c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037a0:	014b      	lsls	r3, r1, #5
 80037a2:	4619      	mov	r1, r3
 80037a4:	4622      	mov	r2, r4
 80037a6:	1b49      	subs	r1, r1, r5
 80037a8:	eb62 0206 	sbc.w	r2, r2, r6
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	0194      	lsls	r4, r2, #6
 80037b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ba:	018b      	lsls	r3, r1, #6
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	eb64 0402 	sbc.w	r4, r4, r2
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037d0:	00d9      	lsls	r1, r3, #3
 80037d2:	460b      	mov	r3, r1
 80037d4:	4614      	mov	r4, r2
 80037d6:	195b      	adds	r3, r3, r5
 80037d8:	eb44 0406 	adc.w	r4, r4, r6
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	02a2      	lsls	r2, r4, #10
 80037e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ea:	0299      	lsls	r1, r3, #10
 80037ec:	460b      	mov	r3, r1
 80037ee:	4614      	mov	r4, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	4621      	mov	r1, r4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	461a      	mov	r2, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	f7fd f989 	bl	8000b14 <__aeabi_uldivmod>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	3301      	adds	r3, #1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	60bb      	str	r3, [r7, #8]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003826:	60bb      	str	r3, [r7, #8]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	68bb      	ldr	r3, [r7, #8]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	00f42400 	.word	0x00f42400
 800383c:	007a1200 	.word	0x007a1200

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_GetHCLKFreq+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000028 	.word	0x20000028

08003858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800385c:	f7ff fff0 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003860:	4601      	mov	r1, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4a03      	ldr	r2, [pc, #12]	; (800387c <HAL_RCC_GetPCLK1Freq+0x24>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	08005cf8 	.word	0x08005cf8

08003880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003884:	f7ff ffdc 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 8003888:	4601      	mov	r1, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003896:	5cd3      	ldrb	r3, [r2, r3]
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08005cf8 	.word	0x08005cf8

080038a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e056      	b.n	8003968 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd ff89 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	ea42 0103 	orr.w	r1, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	f003 0104 	and.w	r1, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_SPI_Transmit_IT+0x20>
 800398c:	2302      	movs	r3, #2
 800398e:	e067      	b.n	8003a60 <HAL_SPI_Transmit_IT+0xf0>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit_IT+0x34>
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039a8:	e055      	b.n	8003a56 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039ba:	e04c      	b.n	8003a56 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2203      	movs	r2, #3
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_SPI_Transmit_IT+0xfc>)
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
 8003a02:	e002      	b.n	8003a0a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <HAL_SPI_Transmit_IT+0x100>)
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d107      	bne.n	8003a24 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003a32:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d008      	beq.n	8003a54 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e000      	b.n	8003a56 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8003a54:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	08003cf7 	.word	0x08003cf7
 8003a70:	08003cb1 	.word	0x08003cb1

08003a74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10f      	bne.n	8003ab8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
    return;
 8003ab6:	e0d8      	b.n	8003c6a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_SPI_IRQHandler+0x66>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
    return;
 8003ad8:	e0c7      	b.n	8003c6a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <HAL_SPI_IRQHandler+0x8c>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80b5 	beq.w	8003c6a <HAL_SPI_IRQHandler+0x1f6>
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80ae 	beq.w	8003c6a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	099b      	lsrs	r3, r3, #6
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d023      	beq.n	8003b62 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d011      	beq.n	8003b4a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0204 	orr.w	r2, r3, #4
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	e00b      	b.n	8003b62 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
        return;
 8003b60:	e083      	b.n	8003c6a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00c      	beq.n	8003bbe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	f043 0208 	orr.w	r2, r3, #8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d050      	beq.n	8003c68 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bd4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_SPI_IRQHandler+0x17e>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d034      	beq.n	8003c5c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0203 	bic.w	r2, r2, #3
 8003c00:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d011      	beq.n	8003c2e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_SPI_IRQHandler+0x1fc>)
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fda6 	bl	8002768 <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_SPI_IRQHandler+0x1fc>)
 8003c3c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fd90 	bl	8002768 <HAL_DMA_Abort_IT>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c5a:	e003      	b.n	8003c64 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f809 	bl	8003c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c62:	e000      	b.n	8003c66 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003c64:	bf00      	nop
    return;
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
  }
}
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	08003c89 	.word	0x08003c89

08003c74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff ffe6 	bl	8003c74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	7812      	ldrb	r2, [r2, #0]
 8003cc4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f8d3 	bl	8003e94 <SPI_CloseTx_ISR>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8b1 	bl	8003e94 <SPI_CloseTx_ISR>
  }
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4a:	e04c      	b.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d048      	beq.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d54:	f7fd fefe 	bl	8001b54 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d13d      	bne.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d82:	d111      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8c:	d004      	beq.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d107      	bne.n	8003da8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d10f      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1a3      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <SPI_EndRxTxTransaction+0x7c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <SPI_EndRxTxTransaction+0x80>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0d5b      	lsrs	r3, r3, #21
 8003e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d112      	bne.n	8003e62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff ff77 	bl	8003d3a <SPI_WaitFlagStateUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00f      	b.n	8003e82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d0f2      	beq.n	8003e62 <SPI_EndRxTxTransaction+0x52>
 8003e7c:	e000      	b.n	8003e80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e7e:	bf00      	nop
  }

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000028 	.word	0x20000028
 8003e90:	165e9f81 	.word	0x165e9f81

08003e94 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <SPI_CloseTx_ISR+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2c      	ldr	r2, [pc, #176]	; (8003f54 <SPI_CloseTx_ISR+0xc0>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	2264      	movs	r2, #100	; 0x64
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb0:	f7fd fe50 	bl	8001b54 <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ec8:	e009      	b.n	8003ede <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0eb      	beq.n	8003eb6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ff8c 	bl	8003e10 <SPI_EndRxTxTransaction>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fe9b 	bl	8003c74 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003f3e:	e002      	b.n	8003f46 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fd fb17 	bl	8001574 <HAL_SPI_TxCpltCallback>
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000028 	.word	0x20000028
 8003f54:	057619f1 	.word	0x057619f1

08003f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e01d      	b.n	8003fa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd fc84 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 f908 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d007      	beq.n	8003fe0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b06      	cmp	r3, #6
 800401e:	d007      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_ConfigClockSource+0x18>
 8004052:	2302      	movs	r3, #2
 8004054:	e0a6      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x166>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004074:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d067      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x120>
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d80b      	bhi.n	80040aa <HAL_TIM_ConfigClockSource+0x6c>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d073      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x140>
 8004096:	2b10      	cmp	r3, #16
 8004098:	d802      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x62>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d06f      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800409e:	e078      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d06c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x140>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d06a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040a8:	e073      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040aa:	2b70      	cmp	r3, #112	; 0x70
 80040ac:	d00d      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x8c>
 80040ae:	2b70      	cmp	r3, #112	; 0x70
 80040b0:	d804      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x7e>
 80040b2:	2b50      	cmp	r3, #80	; 0x50
 80040b4:	d033      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xe0>
 80040b6:	2b60      	cmp	r3, #96	; 0x60
 80040b8:	d041      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040ba:	e06a      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d066      	beq.n	8004190 <HAL_TIM_ConfigClockSource+0x152>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d017      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040c8:	e063      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f000 f961 	bl	80043a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e04c      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f000 f94a 	bl	80043a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e039      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	461a      	mov	r2, r3
 800412c:	f000 f8be 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2150      	movs	r1, #80	; 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f917 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 800413c:	e029      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 f8dd 	bl	800430a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2160      	movs	r1, #96	; 0x60
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f907 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 800415c:	e019      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 f89e 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f8f7 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 800417c:	e009      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 f8ee 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 800418e:	e000      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a31      	ldr	r2, [pc, #196]	; (8004294 <TIM_Base_SetConfig+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a30      	ldr	r2, [pc, #192]	; (8004298 <TIM_Base_SetConfig+0xec>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a2f      	ldr	r2, [pc, #188]	; (800429c <TIM_Base_SetConfig+0xf0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01b      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d017      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <TIM_Base_SetConfig+0xe8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <TIM_Base_SetConfig+0xec>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <TIM_Base_SetConfig+0xf0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <TIM_Base_SetConfig+0xf4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <TIM_Base_SetConfig+0xf8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <TIM_Base_SetConfig+0xfc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <TIM_Base_SetConfig+0xe4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d103      	bne.n	800427c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	615a      	str	r2, [r3, #20]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800

080042ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 030a 	bic.w	r3, r3, #10
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	031b      	lsls	r3, r3, #12
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	f043 0307 	orr.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e050      	b.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004444:	d013      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10c      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4313      	orrs	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40014000 	.word	0x40014000

080044bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e03f      	b.n	800454e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fa0a 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2224      	movs	r2, #36	; 0x24
 80044ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f829 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004514:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004524:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004534:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800459a:	f023 030c 	bic.w	r3, r3, #12
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	f040 818b 	bne.w	80048e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4ac1      	ldr	r2, [pc, #772]	; (80048d4 <UART_SetConfig+0x37c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d005      	beq.n	80045e0 <UART_SetConfig+0x88>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4abf      	ldr	r2, [pc, #764]	; (80048d8 <UART_SetConfig+0x380>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	f040 80bd 	bne.w	800475a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7ff f94e 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80045e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	461d      	mov	r5, r3
 80045ea:	f04f 0600 	mov.w	r6, #0
 80045ee:	46a8      	mov	r8, r5
 80045f0:	46b1      	mov	r9, r6
 80045f2:	eb18 0308 	adds.w	r3, r8, r8
 80045f6:	eb49 0409 	adc.w	r4, r9, r9
 80045fa:	4698      	mov	r8, r3
 80045fc:	46a1      	mov	r9, r4
 80045fe:	eb18 0805 	adds.w	r8, r8, r5
 8004602:	eb49 0906 	adc.w	r9, r9, r6
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800461a:	4688      	mov	r8, r1
 800461c:	4691      	mov	r9, r2
 800461e:	eb18 0005 	adds.w	r0, r8, r5
 8004622:	eb49 0106 	adc.w	r1, r9, r6
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	461d      	mov	r5, r3
 800462c:	f04f 0600 	mov.w	r6, #0
 8004630:	196b      	adds	r3, r5, r5
 8004632:	eb46 0406 	adc.w	r4, r6, r6
 8004636:	461a      	mov	r2, r3
 8004638:	4623      	mov	r3, r4
 800463a:	f7fc fa6b 	bl	8000b14 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	461a      	mov	r2, r3
 8004644:	4ba5      	ldr	r3, [pc, #660]	; (80048dc <UART_SetConfig+0x384>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	461d      	mov	r5, r3
 8004654:	f04f 0600 	mov.w	r6, #0
 8004658:	46a9      	mov	r9, r5
 800465a:	46b2      	mov	sl, r6
 800465c:	eb19 0309 	adds.w	r3, r9, r9
 8004660:	eb4a 040a 	adc.w	r4, sl, sl
 8004664:	4699      	mov	r9, r3
 8004666:	46a2      	mov	sl, r4
 8004668:	eb19 0905 	adds.w	r9, r9, r5
 800466c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004684:	4689      	mov	r9, r1
 8004686:	4692      	mov	sl, r2
 8004688:	eb19 0005 	adds.w	r0, r9, r5
 800468c:	eb4a 0106 	adc.w	r1, sl, r6
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	461d      	mov	r5, r3
 8004696:	f04f 0600 	mov.w	r6, #0
 800469a:	196b      	adds	r3, r5, r5
 800469c:	eb46 0406 	adc.w	r4, r6, r6
 80046a0:	461a      	mov	r2, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	f7fc fa36 	bl	8000b14 <__aeabi_uldivmod>
 80046a8:	4603      	mov	r3, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	461a      	mov	r2, r3
 80046ae:	4b8b      	ldr	r3, [pc, #556]	; (80048dc <UART_SetConfig+0x384>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a86      	ldr	r2, [pc, #536]	; (80048dc <UART_SetConfig+0x384>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046d0:	4498      	add	r8, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	461d      	mov	r5, r3
 80046d6:	f04f 0600 	mov.w	r6, #0
 80046da:	46a9      	mov	r9, r5
 80046dc:	46b2      	mov	sl, r6
 80046de:	eb19 0309 	adds.w	r3, r9, r9
 80046e2:	eb4a 040a 	adc.w	r4, sl, sl
 80046e6:	4699      	mov	r9, r3
 80046e8:	46a2      	mov	sl, r4
 80046ea:	eb19 0905 	adds.w	r9, r9, r5
 80046ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004706:	4689      	mov	r9, r1
 8004708:	4692      	mov	sl, r2
 800470a:	eb19 0005 	adds.w	r0, r9, r5
 800470e:	eb4a 0106 	adc.w	r1, sl, r6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	461d      	mov	r5, r3
 8004718:	f04f 0600 	mov.w	r6, #0
 800471c:	196b      	adds	r3, r5, r5
 800471e:	eb46 0406 	adc.w	r4, r6, r6
 8004722:	461a      	mov	r2, r3
 8004724:	4623      	mov	r3, r4
 8004726:	f7fc f9f5 	bl	8000b14 <__aeabi_uldivmod>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	461a      	mov	r2, r3
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <UART_SetConfig+0x384>)
 8004732:	fba3 1302 	umull	r1, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2164      	movs	r1, #100	; 0x64
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	3332      	adds	r3, #50	; 0x32
 8004744:	4a65      	ldr	r2, [pc, #404]	; (80048dc <UART_SetConfig+0x384>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	f003 0207 	and.w	r2, r3, #7
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4442      	add	r2, r8
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e26f      	b.n	8004c3a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7ff f87d 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 800475e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	461d      	mov	r5, r3
 8004764:	f04f 0600 	mov.w	r6, #0
 8004768:	46a8      	mov	r8, r5
 800476a:	46b1      	mov	r9, r6
 800476c:	eb18 0308 	adds.w	r3, r8, r8
 8004770:	eb49 0409 	adc.w	r4, r9, r9
 8004774:	4698      	mov	r8, r3
 8004776:	46a1      	mov	r9, r4
 8004778:	eb18 0805 	adds.w	r8, r8, r5
 800477c:	eb49 0906 	adc.w	r9, r9, r6
 8004780:	f04f 0100 	mov.w	r1, #0
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800478c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004790:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004794:	4688      	mov	r8, r1
 8004796:	4691      	mov	r9, r2
 8004798:	eb18 0005 	adds.w	r0, r8, r5
 800479c:	eb49 0106 	adc.w	r1, r9, r6
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	461d      	mov	r5, r3
 80047a6:	f04f 0600 	mov.w	r6, #0
 80047aa:	196b      	adds	r3, r5, r5
 80047ac:	eb46 0406 	adc.w	r4, r6, r6
 80047b0:	461a      	mov	r2, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	f7fc f9ae 	bl	8000b14 <__aeabi_uldivmod>
 80047b8:	4603      	mov	r3, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	461a      	mov	r2, r3
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <UART_SetConfig+0x384>)
 80047c0:	fba3 2302 	umull	r2, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	461d      	mov	r5, r3
 80047ce:	f04f 0600 	mov.w	r6, #0
 80047d2:	46a9      	mov	r9, r5
 80047d4:	46b2      	mov	sl, r6
 80047d6:	eb19 0309 	adds.w	r3, r9, r9
 80047da:	eb4a 040a 	adc.w	r4, sl, sl
 80047de:	4699      	mov	r9, r3
 80047e0:	46a2      	mov	sl, r4
 80047e2:	eb19 0905 	adds.w	r9, r9, r5
 80047e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80047ea:	f04f 0100 	mov.w	r1, #0
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047fe:	4689      	mov	r9, r1
 8004800:	4692      	mov	sl, r2
 8004802:	eb19 0005 	adds.w	r0, r9, r5
 8004806:	eb4a 0106 	adc.w	r1, sl, r6
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	461d      	mov	r5, r3
 8004810:	f04f 0600 	mov.w	r6, #0
 8004814:	196b      	adds	r3, r5, r5
 8004816:	eb46 0406 	adc.w	r4, r6, r6
 800481a:	461a      	mov	r2, r3
 800481c:	4623      	mov	r3, r4
 800481e:	f7fc f979 	bl	8000b14 <__aeabi_uldivmod>
 8004822:	4603      	mov	r3, r0
 8004824:	460c      	mov	r4, r1
 8004826:	461a      	mov	r2, r3
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <UART_SetConfig+0x384>)
 800482a:	fba3 1302 	umull	r1, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2164      	movs	r1, #100	; 0x64
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	3332      	adds	r3, #50	; 0x32
 800483c:	4a27      	ldr	r2, [pc, #156]	; (80048dc <UART_SetConfig+0x384>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800484a:	4498      	add	r8, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	461d      	mov	r5, r3
 8004850:	f04f 0600 	mov.w	r6, #0
 8004854:	46a9      	mov	r9, r5
 8004856:	46b2      	mov	sl, r6
 8004858:	eb19 0309 	adds.w	r3, r9, r9
 800485c:	eb4a 040a 	adc.w	r4, sl, sl
 8004860:	4699      	mov	r9, r3
 8004862:	46a2      	mov	sl, r4
 8004864:	eb19 0905 	adds.w	r9, r9, r5
 8004868:	eb4a 0a06 	adc.w	sl, sl, r6
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004878:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800487c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004880:	4689      	mov	r9, r1
 8004882:	4692      	mov	sl, r2
 8004884:	eb19 0005 	adds.w	r0, r9, r5
 8004888:	eb4a 0106 	adc.w	r1, sl, r6
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	461d      	mov	r5, r3
 8004892:	f04f 0600 	mov.w	r6, #0
 8004896:	196b      	adds	r3, r5, r5
 8004898:	eb46 0406 	adc.w	r4, r6, r6
 800489c:	461a      	mov	r2, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	f7fc f938 	bl	8000b14 <__aeabi_uldivmod>
 80048a4:	4603      	mov	r3, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <UART_SetConfig+0x384>)
 80048ac:	fba3 1302 	umull	r1, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	2164      	movs	r1, #100	; 0x64
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	3332      	adds	r3, #50	; 0x32
 80048be:	4a07      	ldr	r2, [pc, #28]	; (80048dc <UART_SetConfig+0x384>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4442      	add	r2, r8
 80048d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80048d2:	e1b2      	b.n	8004c3a <UART_SetConfig+0x6e2>
 80048d4:	40011000 	.word	0x40011000
 80048d8:	40011400 	.word	0x40011400
 80048dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4ad7      	ldr	r2, [pc, #860]	; (8004c44 <UART_SetConfig+0x6ec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d005      	beq.n	80048f6 <UART_SetConfig+0x39e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4ad6      	ldr	r2, [pc, #856]	; (8004c48 <UART_SetConfig+0x6f0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 80d1 	bne.w	8004a98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f6:	f7fe ffc3 	bl	8003880 <HAL_RCC_GetPCLK2Freq>
 80048fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	469a      	mov	sl, r3
 8004900:	f04f 0b00 	mov.w	fp, #0
 8004904:	46d0      	mov	r8, sl
 8004906:	46d9      	mov	r9, fp
 8004908:	eb18 0308 	adds.w	r3, r8, r8
 800490c:	eb49 0409 	adc.w	r4, r9, r9
 8004910:	4698      	mov	r8, r3
 8004912:	46a1      	mov	r9, r4
 8004914:	eb18 080a 	adds.w	r8, r8, sl
 8004918:	eb49 090b 	adc.w	r9, r9, fp
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004928:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800492c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004930:	4688      	mov	r8, r1
 8004932:	4691      	mov	r9, r2
 8004934:	eb1a 0508 	adds.w	r5, sl, r8
 8004938:	eb4b 0609 	adc.w	r6, fp, r9
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f04f 0400 	mov.w	r4, #0
 800494e:	0094      	lsls	r4, r2, #2
 8004950:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004954:	008b      	lsls	r3, r1, #2
 8004956:	461a      	mov	r2, r3
 8004958:	4623      	mov	r3, r4
 800495a:	4628      	mov	r0, r5
 800495c:	4631      	mov	r1, r6
 800495e:	f7fc f8d9 	bl	8000b14 <__aeabi_uldivmod>
 8004962:	4603      	mov	r3, r0
 8004964:	460c      	mov	r4, r1
 8004966:	461a      	mov	r2, r3
 8004968:	4bb8      	ldr	r3, [pc, #736]	; (8004c4c <UART_SetConfig+0x6f4>)
 800496a:	fba3 2302 	umull	r2, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	469b      	mov	fp, r3
 8004978:	f04f 0c00 	mov.w	ip, #0
 800497c:	46d9      	mov	r9, fp
 800497e:	46e2      	mov	sl, ip
 8004980:	eb19 0309 	adds.w	r3, r9, r9
 8004984:	eb4a 040a 	adc.w	r4, sl, sl
 8004988:	4699      	mov	r9, r3
 800498a:	46a2      	mov	sl, r4
 800498c:	eb19 090b 	adds.w	r9, r9, fp
 8004990:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049a8:	4689      	mov	r9, r1
 80049aa:	4692      	mov	sl, r2
 80049ac:	eb1b 0509 	adds.w	r5, fp, r9
 80049b0:	eb4c 060a 	adc.w	r6, ip, sl
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	f04f 0400 	mov.w	r4, #0
 80049c6:	0094      	lsls	r4, r2, #2
 80049c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049cc:	008b      	lsls	r3, r1, #2
 80049ce:	461a      	mov	r2, r3
 80049d0:	4623      	mov	r3, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	4631      	mov	r1, r6
 80049d6:	f7fc f89d 	bl	8000b14 <__aeabi_uldivmod>
 80049da:	4603      	mov	r3, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	461a      	mov	r2, r3
 80049e0:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <UART_SetConfig+0x6f4>)
 80049e2:	fba3 1302 	umull	r1, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2164      	movs	r1, #100	; 0x64
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	3332      	adds	r3, #50	; 0x32
 80049f4:	4a95      	ldr	r2, [pc, #596]	; (8004c4c <UART_SetConfig+0x6f4>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4498      	add	r8, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	469b      	mov	fp, r3
 8004a06:	f04f 0c00 	mov.w	ip, #0
 8004a0a:	46d9      	mov	r9, fp
 8004a0c:	46e2      	mov	sl, ip
 8004a0e:	eb19 0309 	adds.w	r3, r9, r9
 8004a12:	eb4a 040a 	adc.w	r4, sl, sl
 8004a16:	4699      	mov	r9, r3
 8004a18:	46a2      	mov	sl, r4
 8004a1a:	eb19 090b 	adds.w	r9, r9, fp
 8004a1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a22:	f04f 0100 	mov.w	r1, #0
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a36:	4689      	mov	r9, r1
 8004a38:	4692      	mov	sl, r2
 8004a3a:	eb1b 0509 	adds.w	r5, fp, r9
 8004a3e:	eb4c 060a 	adc.w	r6, ip, sl
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	0094      	lsls	r4, r2, #2
 8004a56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4623      	mov	r3, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	4631      	mov	r1, r6
 8004a64:	f7fc f856 	bl	8000b14 <__aeabi_uldivmod>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	; 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a72      	ldr	r2, [pc, #456]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4442      	add	r2, r8
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	e0d0      	b.n	8004c3a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fede 	bl	8003858 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f04f 0b00 	mov.w	fp, #0
 8004aa6:	46d0      	mov	r8, sl
 8004aa8:	46d9      	mov	r9, fp
 8004aaa:	eb18 0308 	adds.w	r3, r8, r8
 8004aae:	eb49 0409 	adc.w	r4, r9, r9
 8004ab2:	4698      	mov	r8, r3
 8004ab4:	46a1      	mov	r9, r4
 8004ab6:	eb18 080a 	adds.w	r8, r8, sl
 8004aba:	eb49 090b 	adc.w	r9, r9, fp
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004aca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ace:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad2:	4688      	mov	r8, r1
 8004ad4:	4691      	mov	r9, r2
 8004ad6:	eb1a 0508 	adds.w	r5, sl, r8
 8004ada:	eb4b 0609 	adc.w	r6, fp, r9
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f04f 0400 	mov.w	r4, #0
 8004af0:	0094      	lsls	r4, r2, #2
 8004af2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004af6:	008b      	lsls	r3, r1, #2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	4631      	mov	r1, r6
 8004b00:	f7fc f808 	bl	8000b14 <__aeabi_uldivmod>
 8004b04:	4603      	mov	r3, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	469b      	mov	fp, r3
 8004b1a:	f04f 0c00 	mov.w	ip, #0
 8004b1e:	46d9      	mov	r9, fp
 8004b20:	46e2      	mov	sl, ip
 8004b22:	eb19 0309 	adds.w	r3, r9, r9
 8004b26:	eb4a 040a 	adc.w	r4, sl, sl
 8004b2a:	4699      	mov	r9, r3
 8004b2c:	46a2      	mov	sl, r4
 8004b2e:	eb19 090b 	adds.w	r9, r9, fp
 8004b32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	4692      	mov	sl, r2
 8004b4e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b52:	eb4c 060a 	adc.w	r6, ip, sl
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	0094      	lsls	r4, r2, #2
 8004b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b6e:	008b      	lsls	r3, r1, #2
 8004b70:	461a      	mov	r2, r3
 8004b72:	4623      	mov	r3, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	4631      	mov	r1, r6
 8004b78:	f7fb ffcc 	bl	8000b14 <__aeabi_uldivmod>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b84:	fba3 1302 	umull	r1, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2164      	movs	r1, #100	; 0x64
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba2:	4498      	add	r8, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	469b      	mov	fp, r3
 8004ba8:	f04f 0c00 	mov.w	ip, #0
 8004bac:	46d9      	mov	r9, fp
 8004bae:	46e2      	mov	sl, ip
 8004bb0:	eb19 0309 	adds.w	r3, r9, r9
 8004bb4:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb8:	4699      	mov	r9, r3
 8004bba:	46a2      	mov	sl, r4
 8004bbc:	eb19 090b 	adds.w	r9, r9, fp
 8004bc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd8:	4689      	mov	r9, r1
 8004bda:	4692      	mov	sl, r2
 8004bdc:	eb1b 0509 	adds.w	r5, fp, r9
 8004be0:	eb4c 060a 	adc.w	r6, ip, sl
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4619      	mov	r1, r3
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	0094      	lsls	r4, r2, #2
 8004bf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4623      	mov	r3, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	4631      	mov	r1, r6
 8004c06:	f7fb ff85 	bl	8000b14 <__aeabi_uldivmod>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004c12:	fba3 1302 	umull	r1, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2164      	movs	r1, #100	; 0x64
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <UART_SetConfig+0x6f4>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4442      	add	r2, r8
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	e7ff      	b.n	8004c3a <UART_SetConfig+0x6e2>
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c44:	40011000 	.word	0x40011000
 8004c48:	40011400 	.word	0x40011400
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <__libc_init_array>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0d      	ldr	r6, [pc, #52]	; (8004c88 <__libc_init_array+0x38>)
 8004c54:	4c0d      	ldr	r4, [pc, #52]	; (8004c8c <__libc_init_array+0x3c>)
 8004c56:	1ba4      	subs	r4, r4, r6
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	42a5      	cmp	r5, r4
 8004c5e:	d109      	bne.n	8004c74 <__libc_init_array+0x24>
 8004c60:	4e0b      	ldr	r6, [pc, #44]	; (8004c90 <__libc_init_array+0x40>)
 8004c62:	4c0c      	ldr	r4, [pc, #48]	; (8004c94 <__libc_init_array+0x44>)
 8004c64:	f001 f832 	bl	8005ccc <_init>
 8004c68:	1ba4      	subs	r4, r4, r6
 8004c6a:	10a4      	asrs	r4, r4, #2
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	42a5      	cmp	r5, r4
 8004c70:	d105      	bne.n	8004c7e <__libc_init_array+0x2e>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c78:	4798      	blx	r3
 8004c7a:	3501      	adds	r5, #1
 8004c7c:	e7ee      	b.n	8004c5c <__libc_init_array+0xc>
 8004c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c82:	4798      	blx	r3
 8004c84:	3501      	adds	r5, #1
 8004c86:	e7f2      	b.n	8004c6e <__libc_init_array+0x1e>
 8004c88:	08005ee8 	.word	0x08005ee8
 8004c8c:	08005ee8 	.word	0x08005ee8
 8004c90:	08005ee8 	.word	0x08005ee8
 8004c94:	08005eec 	.word	0x08005eec

08004c98 <memset>:
 8004c98:	4402      	add	r2, r0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <memset+0xa>
 8004ca0:	4770      	bx	lr
 8004ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca6:	e7f9      	b.n	8004c9c <memset+0x4>

08004ca8 <sin>:
 8004ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004caa:	ec51 0b10 	vmov	r0, r1, d0
 8004cae:	4a20      	ldr	r2, [pc, #128]	; (8004d30 <sin+0x88>)
 8004cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	dc07      	bgt.n	8004cc8 <sin+0x20>
 8004cb8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004d28 <sin+0x80>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f000 fe37 	bl	8005930 <__kernel_sin>
 8004cc2:	ec51 0b10 	vmov	r0, r1, d0
 8004cc6:	e007      	b.n	8004cd8 <sin+0x30>
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <sin+0x8c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	dd09      	ble.n	8004ce2 <sin+0x3a>
 8004cce:	ee10 2a10 	vmov	r2, s0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	f7fb fa84 	bl	80001e0 <__aeabi_dsub>
 8004cd8:	ec41 0b10 	vmov	d0, r0, r1
 8004cdc:	b005      	add	sp, #20
 8004cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ce2:	4668      	mov	r0, sp
 8004ce4:	f000 f828 	bl	8004d38 <__ieee754_rem_pio2>
 8004ce8:	f000 0003 	and.w	r0, r0, #3
 8004cec:	2801      	cmp	r0, #1
 8004cee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cf2:	ed9d 0b00 	vldr	d0, [sp]
 8004cf6:	d004      	beq.n	8004d02 <sin+0x5a>
 8004cf8:	2802      	cmp	r0, #2
 8004cfa:	d005      	beq.n	8004d08 <sin+0x60>
 8004cfc:	b970      	cbnz	r0, 8004d1c <sin+0x74>
 8004cfe:	2001      	movs	r0, #1
 8004d00:	e7dd      	b.n	8004cbe <sin+0x16>
 8004d02:	f000 fa0d 	bl	8005120 <__kernel_cos>
 8004d06:	e7dc      	b.n	8004cc2 <sin+0x1a>
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f000 fe11 	bl	8005930 <__kernel_sin>
 8004d0e:	ec53 2b10 	vmov	r2, r3, d0
 8004d12:	ee10 0a10 	vmov	r0, s0
 8004d16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d1a:	e7dd      	b.n	8004cd8 <sin+0x30>
 8004d1c:	f000 fa00 	bl	8005120 <__kernel_cos>
 8004d20:	e7f5      	b.n	8004d0e <sin+0x66>
 8004d22:	bf00      	nop
 8004d24:	f3af 8000 	nop.w
	...
 8004d30:	3fe921fb 	.word	0x3fe921fb
 8004d34:	7fefffff 	.word	0x7fefffff

08004d38 <__ieee754_rem_pio2>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	ec57 6b10 	vmov	r6, r7, d0
 8004d40:	4bc3      	ldr	r3, [pc, #780]	; (8005050 <__ieee754_rem_pio2+0x318>)
 8004d42:	b08d      	sub	sp, #52	; 0x34
 8004d44:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004d48:	4598      	cmp	r8, r3
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	9704      	str	r7, [sp, #16]
 8004d4e:	dc07      	bgt.n	8004d60 <__ieee754_rem_pio2+0x28>
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	ed84 0b00 	vstr	d0, [r4]
 8004d58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	e027      	b.n	8004db0 <__ieee754_rem_pio2+0x78>
 8004d60:	4bbc      	ldr	r3, [pc, #752]	; (8005054 <__ieee754_rem_pio2+0x31c>)
 8004d62:	4598      	cmp	r8, r3
 8004d64:	dc75      	bgt.n	8004e52 <__ieee754_rem_pio2+0x11a>
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	4dbb      	ldr	r5, [pc, #748]	; (8005058 <__ieee754_rem_pio2+0x320>)
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	ee10 0a10 	vmov	r0, s0
 8004d70:	a3a9      	add	r3, pc, #676	; (adr r3, 8005018 <__ieee754_rem_pio2+0x2e0>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	4639      	mov	r1, r7
 8004d78:	dd36      	ble.n	8004de8 <__ieee754_rem_pio2+0xb0>
 8004d7a:	f7fb fa31 	bl	80001e0 <__aeabi_dsub>
 8004d7e:	45a8      	cmp	r8, r5
 8004d80:	4606      	mov	r6, r0
 8004d82:	460f      	mov	r7, r1
 8004d84:	d018      	beq.n	8004db8 <__ieee754_rem_pio2+0x80>
 8004d86:	a3a6      	add	r3, pc, #664	; (adr r3, 8005020 <__ieee754_rem_pio2+0x2e8>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f7fb fa28 	bl	80001e0 <__aeabi_dsub>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	e9c4 2300 	strd	r2, r3, [r4]
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f7fb fa20 	bl	80001e0 <__aeabi_dsub>
 8004da0:	a39f      	add	r3, pc, #636	; (adr r3, 8005020 <__ieee754_rem_pio2+0x2e8>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fa1b 	bl	80001e0 <__aeabi_dsub>
 8004daa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004dae:	2501      	movs	r5, #1
 8004db0:	4628      	mov	r0, r5
 8004db2:	b00d      	add	sp, #52	; 0x34
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	a39b      	add	r3, pc, #620	; (adr r3, 8005028 <__ieee754_rem_pio2+0x2f0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fa0f 	bl	80001e0 <__aeabi_dsub>
 8004dc2:	a39b      	add	r3, pc, #620	; (adr r3, 8005030 <__ieee754_rem_pio2+0x2f8>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	4606      	mov	r6, r0
 8004dca:	460f      	mov	r7, r1
 8004dcc:	f7fb fa08 	bl	80001e0 <__aeabi_dsub>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	e9c4 2300 	strd	r2, r3, [r4]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fa00 	bl	80001e0 <__aeabi_dsub>
 8004de0:	a393      	add	r3, pc, #588	; (adr r3, 8005030 <__ieee754_rem_pio2+0x2f8>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	e7de      	b.n	8004da6 <__ieee754_rem_pio2+0x6e>
 8004de8:	f7fb f9fc 	bl	80001e4 <__adddf3>
 8004dec:	45a8      	cmp	r8, r5
 8004dee:	4606      	mov	r6, r0
 8004df0:	460f      	mov	r7, r1
 8004df2:	d016      	beq.n	8004e22 <__ieee754_rem_pio2+0xea>
 8004df4:	a38a      	add	r3, pc, #552	; (adr r3, 8005020 <__ieee754_rem_pio2+0x2e8>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	f7fb f9f3 	bl	80001e4 <__adddf3>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	e9c4 2300 	strd	r2, r3, [r4]
 8004e06:	4630      	mov	r0, r6
 8004e08:	4639      	mov	r1, r7
 8004e0a:	f7fb f9e9 	bl	80001e0 <__aeabi_dsub>
 8004e0e:	a384      	add	r3, pc, #528	; (adr r3, 8005020 <__ieee754_rem_pio2+0x2e8>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f7fb f9e6 	bl	80001e4 <__adddf3>
 8004e18:	f04f 35ff 	mov.w	r5, #4294967295
 8004e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e20:	e7c6      	b.n	8004db0 <__ieee754_rem_pio2+0x78>
 8004e22:	a381      	add	r3, pc, #516	; (adr r3, 8005028 <__ieee754_rem_pio2+0x2f0>)
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f7fb f9dc 	bl	80001e4 <__adddf3>
 8004e2c:	a380      	add	r3, pc, #512	; (adr r3, 8005030 <__ieee754_rem_pio2+0x2f8>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	4606      	mov	r6, r0
 8004e34:	460f      	mov	r7, r1
 8004e36:	f7fb f9d5 	bl	80001e4 <__adddf3>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9c4 2300 	strd	r2, r3, [r4]
 8004e42:	4630      	mov	r0, r6
 8004e44:	4639      	mov	r1, r7
 8004e46:	f7fb f9cb 	bl	80001e0 <__aeabi_dsub>
 8004e4a:	a379      	add	r3, pc, #484	; (adr r3, 8005030 <__ieee754_rem_pio2+0x2f8>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	e7e0      	b.n	8004e14 <__ieee754_rem_pio2+0xdc>
 8004e52:	4b82      	ldr	r3, [pc, #520]	; (800505c <__ieee754_rem_pio2+0x324>)
 8004e54:	4598      	cmp	r8, r3
 8004e56:	f300 80d0 	bgt.w	8004ffa <__ieee754_rem_pio2+0x2c2>
 8004e5a:	f000 fe23 	bl	8005aa4 <fabs>
 8004e5e:	ec57 6b10 	vmov	r6, r7, d0
 8004e62:	ee10 0a10 	vmov	r0, s0
 8004e66:	a374      	add	r3, pc, #464	; (adr r3, 8005038 <__ieee754_rem_pio2+0x300>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	f7fb fb6f 	bl	8000550 <__aeabi_dmul>
 8004e72:	2200      	movs	r2, #0
 8004e74:	4b7a      	ldr	r3, [pc, #488]	; (8005060 <__ieee754_rem_pio2+0x328>)
 8004e76:	f7fb f9b5 	bl	80001e4 <__adddf3>
 8004e7a:	f7fb fe03 	bl	8000a84 <__aeabi_d2iz>
 8004e7e:	4605      	mov	r5, r0
 8004e80:	f7fb fafc 	bl	800047c <__aeabi_i2d>
 8004e84:	a364      	add	r3, pc, #400	; (adr r3, 8005018 <__ieee754_rem_pio2+0x2e0>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e8e:	f7fb fb5f 	bl	8000550 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4630      	mov	r0, r6
 8004e98:	4639      	mov	r1, r7
 8004e9a:	f7fb f9a1 	bl	80001e0 <__aeabi_dsub>
 8004e9e:	a360      	add	r3, pc, #384	; (adr r3, 8005020 <__ieee754_rem_pio2+0x2e8>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	4682      	mov	sl, r0
 8004ea6:	468b      	mov	fp, r1
 8004ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eac:	f7fb fb50 	bl	8000550 <__aeabi_dmul>
 8004eb0:	2d1f      	cmp	r5, #31
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	460f      	mov	r7, r1
 8004eb6:	dc0c      	bgt.n	8004ed2 <__ieee754_rem_pio2+0x19a>
 8004eb8:	1e6a      	subs	r2, r5, #1
 8004eba:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <__ieee754_rem_pio2+0x32c>)
 8004ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec0:	4543      	cmp	r3, r8
 8004ec2:	d006      	beq.n	8004ed2 <__ieee754_rem_pio2+0x19a>
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	4650      	mov	r0, sl
 8004eca:	4659      	mov	r1, fp
 8004ecc:	f7fb f988 	bl	80001e0 <__aeabi_dsub>
 8004ed0:	e00e      	b.n	8004ef0 <__ieee754_rem_pio2+0x1b8>
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	4659      	mov	r1, fp
 8004eda:	f7fb f981 	bl	80001e0 <__aeabi_dsub>
 8004ede:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ee2:	9305      	str	r3, [sp, #20]
 8004ee4:	9a05      	ldr	r2, [sp, #20]
 8004ee6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	dc02      	bgt.n	8004ef6 <__ieee754_rem_pio2+0x1be>
 8004ef0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ef4:	e039      	b.n	8004f6a <__ieee754_rem_pio2+0x232>
 8004ef6:	a34c      	add	r3, pc, #304	; (adr r3, 8005028 <__ieee754_rem_pio2+0x2f0>)
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f00:	f7fb fb26 	bl	8000550 <__aeabi_dmul>
 8004f04:	4606      	mov	r6, r0
 8004f06:	460f      	mov	r7, r1
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	4659      	mov	r1, fp
 8004f10:	f7fb f966 	bl	80001e0 <__aeabi_dsub>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4689      	mov	r9, r1
 8004f1c:	4650      	mov	r0, sl
 8004f1e:	4659      	mov	r1, fp
 8004f20:	f7fb f95e 	bl	80001e0 <__aeabi_dsub>
 8004f24:	4632      	mov	r2, r6
 8004f26:	463b      	mov	r3, r7
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_dsub>
 8004f2c:	a340      	add	r3, pc, #256	; (adr r3, 8005030 <__ieee754_rem_pio2+0x2f8>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3a:	f7fb fb09 	bl	8000550 <__aeabi_dmul>
 8004f3e:	4632      	mov	r2, r6
 8004f40:	463b      	mov	r3, r7
 8004f42:	f7fb f94d 	bl	80001e0 <__aeabi_dsub>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	4640      	mov	r0, r8
 8004f50:	4649      	mov	r1, r9
 8004f52:	f7fb f945 	bl	80001e0 <__aeabi_dsub>
 8004f56:	9a05      	ldr	r2, [sp, #20]
 8004f58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b31      	cmp	r3, #49	; 0x31
 8004f60:	dc20      	bgt.n	8004fa4 <__ieee754_rem_pio2+0x26c>
 8004f62:	e9c4 0100 	strd	r0, r1, [r4]
 8004f66:	46c2      	mov	sl, r8
 8004f68:	46cb      	mov	fp, r9
 8004f6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f6e:	4650      	mov	r0, sl
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	4659      	mov	r1, fp
 8004f76:	f7fb f933 	bl	80001e0 <__aeabi_dsub>
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	f7fb f92f 	bl	80001e0 <__aeabi_dsub>
 8004f82:	9b04      	ldr	r3, [sp, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f8a:	f6bf af11 	bge.w	8004db0 <__ieee754_rem_pio2+0x78>
 8004f8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	f8c4 8000 	str.w	r8, [r4]
 8004f98:	60a0      	str	r0, [r4, #8]
 8004f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f9e:	60e3      	str	r3, [r4, #12]
 8004fa0:	426d      	negs	r5, r5
 8004fa2:	e705      	b.n	8004db0 <__ieee754_rem_pio2+0x78>
 8004fa4:	a326      	add	r3, pc, #152	; (adr r3, 8005040 <__ieee754_rem_pio2+0x308>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fae:	f7fb facf 	bl	8000550 <__aeabi_dmul>
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	460f      	mov	r7, r1
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4640      	mov	r0, r8
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	f7fb f90f 	bl	80001e0 <__aeabi_dsub>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4682      	mov	sl, r0
 8004fc8:	468b      	mov	fp, r1
 8004fca:	4640      	mov	r0, r8
 8004fcc:	4649      	mov	r1, r9
 8004fce:	f7fb f907 	bl	80001e0 <__aeabi_dsub>
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	463b      	mov	r3, r7
 8004fd6:	f7fb f903 	bl	80001e0 <__aeabi_dsub>
 8004fda:	a31b      	add	r3, pc, #108	; (adr r3, 8005048 <__ieee754_rem_pio2+0x310>)
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fe8:	f7fb fab2 	bl	8000550 <__aeabi_dmul>
 8004fec:	4632      	mov	r2, r6
 8004fee:	463b      	mov	r3, r7
 8004ff0:	f7fb f8f6 	bl	80001e0 <__aeabi_dsub>
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	460f      	mov	r7, r1
 8004ff8:	e764      	b.n	8004ec4 <__ieee754_rem_pio2+0x18c>
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <__ieee754_rem_pio2+0x330>)
 8004ffc:	4598      	cmp	r8, r3
 8004ffe:	dd35      	ble.n	800506c <__ieee754_rem_pio2+0x334>
 8005000:	ee10 2a10 	vmov	r2, s0
 8005004:	463b      	mov	r3, r7
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	f7fb f8e9 	bl	80001e0 <__aeabi_dsub>
 800500e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005012:	e9c4 0100 	strd	r0, r1, [r4]
 8005016:	e6a1      	b.n	8004d5c <__ieee754_rem_pio2+0x24>
 8005018:	54400000 	.word	0x54400000
 800501c:	3ff921fb 	.word	0x3ff921fb
 8005020:	1a626331 	.word	0x1a626331
 8005024:	3dd0b461 	.word	0x3dd0b461
 8005028:	1a600000 	.word	0x1a600000
 800502c:	3dd0b461 	.word	0x3dd0b461
 8005030:	2e037073 	.word	0x2e037073
 8005034:	3ba3198a 	.word	0x3ba3198a
 8005038:	6dc9c883 	.word	0x6dc9c883
 800503c:	3fe45f30 	.word	0x3fe45f30
 8005040:	2e000000 	.word	0x2e000000
 8005044:	3ba3198a 	.word	0x3ba3198a
 8005048:	252049c1 	.word	0x252049c1
 800504c:	397b839a 	.word	0x397b839a
 8005050:	3fe921fb 	.word	0x3fe921fb
 8005054:	4002d97b 	.word	0x4002d97b
 8005058:	3ff921fb 	.word	0x3ff921fb
 800505c:	413921fb 	.word	0x413921fb
 8005060:	3fe00000 	.word	0x3fe00000
 8005064:	08005d08 	.word	0x08005d08
 8005068:	7fefffff 	.word	0x7fefffff
 800506c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005070:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005074:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005078:	4630      	mov	r0, r6
 800507a:	460f      	mov	r7, r1
 800507c:	f7fb fd02 	bl	8000a84 <__aeabi_d2iz>
 8005080:	f7fb f9fc 	bl	800047c <__aeabi_i2d>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4630      	mov	r0, r6
 800508a:	4639      	mov	r1, r7
 800508c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005090:	f7fb f8a6 	bl	80001e0 <__aeabi_dsub>
 8005094:	2200      	movs	r2, #0
 8005096:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <__ieee754_rem_pio2+0x3dc>)
 8005098:	f7fb fa5a 	bl	8000550 <__aeabi_dmul>
 800509c:	460f      	mov	r7, r1
 800509e:	4606      	mov	r6, r0
 80050a0:	f7fb fcf0 	bl	8000a84 <__aeabi_d2iz>
 80050a4:	f7fb f9ea 	bl	800047c <__aeabi_i2d>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80050b4:	f7fb f894 	bl	80001e0 <__aeabi_dsub>
 80050b8:	2200      	movs	r2, #0
 80050ba:	4b16      	ldr	r3, [pc, #88]	; (8005114 <__ieee754_rem_pio2+0x3dc>)
 80050bc:	f7fb fa48 	bl	8000550 <__aeabi_dmul>
 80050c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80050c8:	f04f 0803 	mov.w	r8, #3
 80050cc:	2600      	movs	r6, #0
 80050ce:	2700      	movs	r7, #0
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80050d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80050dc:	f7fb fca0 	bl	8000a20 <__aeabi_dcmpeq>
 80050e0:	b9b0      	cbnz	r0, 8005110 <__ieee754_rem_pio2+0x3d8>
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__ieee754_rem_pio2+0x3e0>)
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2302      	movs	r3, #2
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	462a      	mov	r2, r5
 80050ec:	4643      	mov	r3, r8
 80050ee:	4621      	mov	r1, r4
 80050f0:	a806      	add	r0, sp, #24
 80050f2:	f000 f8dd 	bl	80052b0 <__kernel_rem_pio2>
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	4605      	mov	r5, r0
 80050fc:	f6bf ae58 	bge.w	8004db0 <__ieee754_rem_pio2+0x78>
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005106:	6063      	str	r3, [r4, #4]
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800510e:	e746      	b.n	8004f9e <__ieee754_rem_pio2+0x266>
 8005110:	46d0      	mov	r8, sl
 8005112:	e7dd      	b.n	80050d0 <__ieee754_rem_pio2+0x398>
 8005114:	41700000 	.word	0x41700000
 8005118:	08005d88 	.word	0x08005d88
 800511c:	00000000 	.word	0x00000000

08005120 <__kernel_cos>:
 8005120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	ec59 8b10 	vmov	r8, r9, d0
 8005128:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800512c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005130:	ed2d 8b02 	vpush	{d8}
 8005134:	eeb0 8a41 	vmov.f32	s16, s2
 8005138:	eef0 8a61 	vmov.f32	s17, s3
 800513c:	da07      	bge.n	800514e <__kernel_cos+0x2e>
 800513e:	ee10 0a10 	vmov	r0, s0
 8005142:	4649      	mov	r1, r9
 8005144:	f7fb fc9e 	bl	8000a84 <__aeabi_d2iz>
 8005148:	2800      	cmp	r0, #0
 800514a:	f000 8089 	beq.w	8005260 <__kernel_cos+0x140>
 800514e:	4642      	mov	r2, r8
 8005150:	464b      	mov	r3, r9
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb f9fb 	bl	8000550 <__aeabi_dmul>
 800515a:	2200      	movs	r2, #0
 800515c:	4b4e      	ldr	r3, [pc, #312]	; (8005298 <__kernel_cos+0x178>)
 800515e:	4604      	mov	r4, r0
 8005160:	460d      	mov	r5, r1
 8005162:	f7fb f9f5 	bl	8000550 <__aeabi_dmul>
 8005166:	a340      	add	r3, pc, #256	; (adr r3, 8005268 <__kernel_cos+0x148>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	4682      	mov	sl, r0
 800516e:	468b      	mov	fp, r1
 8005170:	4620      	mov	r0, r4
 8005172:	4629      	mov	r1, r5
 8005174:	f7fb f9ec 	bl	8000550 <__aeabi_dmul>
 8005178:	a33d      	add	r3, pc, #244	; (adr r3, 8005270 <__kernel_cos+0x150>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb f831 	bl	80001e4 <__adddf3>
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	f7fb f9e3 	bl	8000550 <__aeabi_dmul>
 800518a:	a33b      	add	r3, pc, #236	; (adr r3, 8005278 <__kernel_cos+0x158>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f826 	bl	80001e0 <__aeabi_dsub>
 8005194:	4622      	mov	r2, r4
 8005196:	462b      	mov	r3, r5
 8005198:	f7fb f9da 	bl	8000550 <__aeabi_dmul>
 800519c:	a338      	add	r3, pc, #224	; (adr r3, 8005280 <__kernel_cos+0x160>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f81f 	bl	80001e4 <__adddf3>
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	f7fb f9d1 	bl	8000550 <__aeabi_dmul>
 80051ae:	a336      	add	r3, pc, #216	; (adr r3, 8005288 <__kernel_cos+0x168>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fb f814 	bl	80001e0 <__aeabi_dsub>
 80051b8:	4622      	mov	r2, r4
 80051ba:	462b      	mov	r3, r5
 80051bc:	f7fb f9c8 	bl	8000550 <__aeabi_dmul>
 80051c0:	a333      	add	r3, pc, #204	; (adr r3, 8005290 <__kernel_cos+0x170>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fb f80d 	bl	80001e4 <__adddf3>
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	f7fb f9bf 	bl	8000550 <__aeabi_dmul>
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f7fb f9bb 	bl	8000550 <__aeabi_dmul>
 80051da:	ec53 2b18 	vmov	r2, r3, d8
 80051de:	4604      	mov	r4, r0
 80051e0:	460d      	mov	r5, r1
 80051e2:	4640      	mov	r0, r8
 80051e4:	4649      	mov	r1, r9
 80051e6:	f7fb f9b3 	bl	8000550 <__aeabi_dmul>
 80051ea:	460b      	mov	r3, r1
 80051ec:	4602      	mov	r2, r0
 80051ee:	4629      	mov	r1, r5
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fa fff5 	bl	80001e0 <__aeabi_dsub>
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <__kernel_cos+0x17c>)
 80051f8:	429e      	cmp	r6, r3
 80051fa:	4680      	mov	r8, r0
 80051fc:	4689      	mov	r9, r1
 80051fe:	dc11      	bgt.n	8005224 <__kernel_cos+0x104>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4650      	mov	r0, sl
 8005206:	4659      	mov	r1, fp
 8005208:	f7fa ffea 	bl	80001e0 <__aeabi_dsub>
 800520c:	460b      	mov	r3, r1
 800520e:	4924      	ldr	r1, [pc, #144]	; (80052a0 <__kernel_cos+0x180>)
 8005210:	4602      	mov	r2, r0
 8005212:	2000      	movs	r0, #0
 8005214:	f7fa ffe4 	bl	80001e0 <__aeabi_dsub>
 8005218:	ecbd 8b02 	vpop	{d8}
 800521c:	ec41 0b10 	vmov	d0, r0, r1
 8005220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <__kernel_cos+0x184>)
 8005226:	491e      	ldr	r1, [pc, #120]	; (80052a0 <__kernel_cos+0x180>)
 8005228:	429e      	cmp	r6, r3
 800522a:	bfcc      	ite	gt
 800522c:	4d1e      	ldrgt	r5, [pc, #120]	; (80052a8 <__kernel_cos+0x188>)
 800522e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005232:	2400      	movs	r4, #0
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	2000      	movs	r0, #0
 800523a:	f7fa ffd1 	bl	80001e0 <__aeabi_dsub>
 800523e:	4622      	mov	r2, r4
 8005240:	4606      	mov	r6, r0
 8005242:	460f      	mov	r7, r1
 8005244:	462b      	mov	r3, r5
 8005246:	4650      	mov	r0, sl
 8005248:	4659      	mov	r1, fp
 800524a:	f7fa ffc9 	bl	80001e0 <__aeabi_dsub>
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	f7fa ffc5 	bl	80001e0 <__aeabi_dsub>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	e7d9      	b.n	8005214 <__kernel_cos+0xf4>
 8005260:	2000      	movs	r0, #0
 8005262:	490f      	ldr	r1, [pc, #60]	; (80052a0 <__kernel_cos+0x180>)
 8005264:	e7d8      	b.n	8005218 <__kernel_cos+0xf8>
 8005266:	bf00      	nop
 8005268:	be8838d4 	.word	0xbe8838d4
 800526c:	bda8fae9 	.word	0xbda8fae9
 8005270:	bdb4b1c4 	.word	0xbdb4b1c4
 8005274:	3e21ee9e 	.word	0x3e21ee9e
 8005278:	809c52ad 	.word	0x809c52ad
 800527c:	3e927e4f 	.word	0x3e927e4f
 8005280:	19cb1590 	.word	0x19cb1590
 8005284:	3efa01a0 	.word	0x3efa01a0
 8005288:	16c15177 	.word	0x16c15177
 800528c:	3f56c16c 	.word	0x3f56c16c
 8005290:	5555554c 	.word	0x5555554c
 8005294:	3fa55555 	.word	0x3fa55555
 8005298:	3fe00000 	.word	0x3fe00000
 800529c:	3fd33332 	.word	0x3fd33332
 80052a0:	3ff00000 	.word	0x3ff00000
 80052a4:	3fe90000 	.word	0x3fe90000
 80052a8:	3fd20000 	.word	0x3fd20000
 80052ac:	00000000 	.word	0x00000000

080052b0 <__kernel_rem_pio2>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	ed2d 8b02 	vpush	{d8}
 80052b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80052bc:	1ed4      	subs	r4, r2, #3
 80052be:	9308      	str	r3, [sp, #32]
 80052c0:	9101      	str	r1, [sp, #4]
 80052c2:	4bc5      	ldr	r3, [pc, #788]	; (80055d8 <__kernel_rem_pio2+0x328>)
 80052c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80052c6:	9009      	str	r0, [sp, #36]	; 0x24
 80052c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052cc:	9304      	str	r3, [sp, #16]
 80052ce:	9b08      	ldr	r3, [sp, #32]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	9307      	str	r3, [sp, #28]
 80052d4:	2318      	movs	r3, #24
 80052d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80052da:	f06f 0317 	mvn.w	r3, #23
 80052de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80052e2:	fb04 3303 	mla	r3, r4, r3, r3
 80052e6:	eb03 0a02 	add.w	sl, r3, r2
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	9a07      	ldr	r2, [sp, #28]
 80052ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80055c8 <__kernel_rem_pio2+0x318>
 80052f2:	eb03 0802 	add.w	r8, r3, r2
 80052f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80052f8:	1aa7      	subs	r7, r4, r2
 80052fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052fe:	ae22      	add	r6, sp, #136	; 0x88
 8005300:	2500      	movs	r5, #0
 8005302:	4545      	cmp	r5, r8
 8005304:	dd13      	ble.n	800532e <__kernel_rem_pio2+0x7e>
 8005306:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80055c8 <__kernel_rem_pio2+0x318>
 800530a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800530e:	2600      	movs	r6, #0
 8005310:	9b04      	ldr	r3, [sp, #16]
 8005312:	429e      	cmp	r6, r3
 8005314:	dc32      	bgt.n	800537c <__kernel_rem_pio2+0xcc>
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	199d      	adds	r5, r3, r6
 800531e:	ab22      	add	r3, sp, #136	; 0x88
 8005320:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005324:	9306      	str	r3, [sp, #24]
 8005326:	ec59 8b18 	vmov	r8, r9, d8
 800532a:	2700      	movs	r7, #0
 800532c:	e01f      	b.n	800536e <__kernel_rem_pio2+0xbe>
 800532e:	42ef      	cmn	r7, r5
 8005330:	d407      	bmi.n	8005342 <__kernel_rem_pio2+0x92>
 8005332:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005336:	f7fb f8a1 	bl	800047c <__aeabi_i2d>
 800533a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800533e:	3501      	adds	r5, #1
 8005340:	e7df      	b.n	8005302 <__kernel_rem_pio2+0x52>
 8005342:	ec51 0b18 	vmov	r0, r1, d8
 8005346:	e7f8      	b.n	800533a <__kernel_rem_pio2+0x8a>
 8005348:	9906      	ldr	r1, [sp, #24]
 800534a:	9d02      	ldr	r5, [sp, #8]
 800534c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005350:	9106      	str	r1, [sp, #24]
 8005352:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005356:	9502      	str	r5, [sp, #8]
 8005358:	f7fb f8fa 	bl	8000550 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	f7fa ff3e 	bl	80001e4 <__adddf3>
 8005368:	3701      	adds	r7, #1
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	9b07      	ldr	r3, [sp, #28]
 8005370:	429f      	cmp	r7, r3
 8005372:	dde9      	ble.n	8005348 <__kernel_rem_pio2+0x98>
 8005374:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005378:	3601      	adds	r6, #1
 800537a:	e7c9      	b.n	8005310 <__kernel_rem_pio2+0x60>
 800537c:	9b04      	ldr	r3, [sp, #16]
 800537e:	aa0e      	add	r2, sp, #56	; 0x38
 8005380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005384:	930c      	str	r3, [sp, #48]	; 0x30
 8005386:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005388:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800538c:	9c04      	ldr	r4, [sp, #16]
 800538e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005390:	ab9a      	add	r3, sp, #616	; 0x268
 8005392:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005396:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800539a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800539e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80053a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80053a6:	ab9a      	add	r3, sp, #616	; 0x268
 80053a8:	445b      	add	r3, fp
 80053aa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80053ae:	2500      	movs	r5, #0
 80053b0:	1b63      	subs	r3, r4, r5
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dc78      	bgt.n	80054a8 <__kernel_rem_pio2+0x1f8>
 80053b6:	4650      	mov	r0, sl
 80053b8:	ec49 8b10 	vmov	d0, r8, r9
 80053bc:	f000 fc00 	bl	8005bc0 <scalbn>
 80053c0:	ec57 6b10 	vmov	r6, r7, d0
 80053c4:	2200      	movs	r2, #0
 80053c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80053ca:	ee10 0a10 	vmov	r0, s0
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fb f8be 	bl	8000550 <__aeabi_dmul>
 80053d4:	ec41 0b10 	vmov	d0, r0, r1
 80053d8:	f000 fb6e 	bl	8005ab8 <floor>
 80053dc:	2200      	movs	r2, #0
 80053de:	ec51 0b10 	vmov	r0, r1, d0
 80053e2:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <__kernel_rem_pio2+0x32c>)
 80053e4:	f7fb f8b4 	bl	8000550 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fa fef6 	bl	80001e0 <__aeabi_dsub>
 80053f4:	460f      	mov	r7, r1
 80053f6:	4606      	mov	r6, r0
 80053f8:	f7fb fb44 	bl	8000a84 <__aeabi_d2iz>
 80053fc:	9006      	str	r0, [sp, #24]
 80053fe:	f7fb f83d 	bl	800047c <__aeabi_i2d>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa fee9 	bl	80001e0 <__aeabi_dsub>
 800540e:	f1ba 0f00 	cmp.w	sl, #0
 8005412:	4606      	mov	r6, r0
 8005414:	460f      	mov	r7, r1
 8005416:	dd6c      	ble.n	80054f2 <__kernel_rem_pio2+0x242>
 8005418:	1e62      	subs	r2, r4, #1
 800541a:	ab0e      	add	r3, sp, #56	; 0x38
 800541c:	f1ca 0118 	rsb	r1, sl, #24
 8005420:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005424:	9d06      	ldr	r5, [sp, #24]
 8005426:	fa40 f301 	asr.w	r3, r0, r1
 800542a:	441d      	add	r5, r3
 800542c:	408b      	lsls	r3, r1
 800542e:	1ac0      	subs	r0, r0, r3
 8005430:	ab0e      	add	r3, sp, #56	; 0x38
 8005432:	9506      	str	r5, [sp, #24]
 8005434:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005438:	f1ca 0317 	rsb	r3, sl, #23
 800543c:	fa40 f303 	asr.w	r3, r0, r3
 8005440:	9302      	str	r3, [sp, #8]
 8005442:	9b02      	ldr	r3, [sp, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dd62      	ble.n	800550e <__kernel_rem_pio2+0x25e>
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	2200      	movs	r2, #0
 800544c:	3301      	adds	r3, #1
 800544e:	9306      	str	r3, [sp, #24]
 8005450:	4615      	mov	r5, r2
 8005452:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005456:	4294      	cmp	r4, r2
 8005458:	f300 8095 	bgt.w	8005586 <__kernel_rem_pio2+0x2d6>
 800545c:	f1ba 0f00 	cmp.w	sl, #0
 8005460:	dd07      	ble.n	8005472 <__kernel_rem_pio2+0x1c2>
 8005462:	f1ba 0f01 	cmp.w	sl, #1
 8005466:	f000 80a2 	beq.w	80055ae <__kernel_rem_pio2+0x2fe>
 800546a:	f1ba 0f02 	cmp.w	sl, #2
 800546e:	f000 80c1 	beq.w	80055f4 <__kernel_rem_pio2+0x344>
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d14a      	bne.n	800550e <__kernel_rem_pio2+0x25e>
 8005478:	4632      	mov	r2, r6
 800547a:	463b      	mov	r3, r7
 800547c:	2000      	movs	r0, #0
 800547e:	4958      	ldr	r1, [pc, #352]	; (80055e0 <__kernel_rem_pio2+0x330>)
 8005480:	f7fa feae 	bl	80001e0 <__aeabi_dsub>
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	2d00      	cmp	r5, #0
 800548a:	d040      	beq.n	800550e <__kernel_rem_pio2+0x25e>
 800548c:	4650      	mov	r0, sl
 800548e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80055d0 <__kernel_rem_pio2+0x320>
 8005492:	f000 fb95 	bl	8005bc0 <scalbn>
 8005496:	4630      	mov	r0, r6
 8005498:	4639      	mov	r1, r7
 800549a:	ec53 2b10 	vmov	r2, r3, d0
 800549e:	f7fa fe9f 	bl	80001e0 <__aeabi_dsub>
 80054a2:	4606      	mov	r6, r0
 80054a4:	460f      	mov	r7, r1
 80054a6:	e032      	b.n	800550e <__kernel_rem_pio2+0x25e>
 80054a8:	2200      	movs	r2, #0
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <__kernel_rem_pio2+0x334>)
 80054ac:	4640      	mov	r0, r8
 80054ae:	4649      	mov	r1, r9
 80054b0:	f7fb f84e 	bl	8000550 <__aeabi_dmul>
 80054b4:	f7fb fae6 	bl	8000a84 <__aeabi_d2iz>
 80054b8:	f7fa ffe0 	bl	800047c <__aeabi_i2d>
 80054bc:	2200      	movs	r2, #0
 80054be:	4b4a      	ldr	r3, [pc, #296]	; (80055e8 <__kernel_rem_pio2+0x338>)
 80054c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c4:	f7fb f844 	bl	8000550 <__aeabi_dmul>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fa fe86 	bl	80001e0 <__aeabi_dsub>
 80054d4:	f7fb fad6 	bl	8000a84 <__aeabi_d2iz>
 80054d8:	ab0e      	add	r3, sp, #56	; 0x38
 80054da:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80054de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80054e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e6:	f7fa fe7d 	bl	80001e4 <__adddf3>
 80054ea:	3501      	adds	r5, #1
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	e75e      	b.n	80053b0 <__kernel_rem_pio2+0x100>
 80054f2:	d105      	bne.n	8005500 <__kernel_rem_pio2+0x250>
 80054f4:	1e63      	subs	r3, r4, #1
 80054f6:	aa0e      	add	r2, sp, #56	; 0x38
 80054f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054fc:	15c3      	asrs	r3, r0, #23
 80054fe:	e79f      	b.n	8005440 <__kernel_rem_pio2+0x190>
 8005500:	2200      	movs	r2, #0
 8005502:	4b3a      	ldr	r3, [pc, #232]	; (80055ec <__kernel_rem_pio2+0x33c>)
 8005504:	f7fb faaa 	bl	8000a5c <__aeabi_dcmpge>
 8005508:	2800      	cmp	r0, #0
 800550a:	d139      	bne.n	8005580 <__kernel_rem_pio2+0x2d0>
 800550c:	9002      	str	r0, [sp, #8]
 800550e:	2200      	movs	r2, #0
 8005510:	2300      	movs	r3, #0
 8005512:	4630      	mov	r0, r6
 8005514:	4639      	mov	r1, r7
 8005516:	f7fb fa83 	bl	8000a20 <__aeabi_dcmpeq>
 800551a:	2800      	cmp	r0, #0
 800551c:	f000 80c7 	beq.w	80056ae <__kernel_rem_pio2+0x3fe>
 8005520:	1e65      	subs	r5, r4, #1
 8005522:	462b      	mov	r3, r5
 8005524:	2200      	movs	r2, #0
 8005526:	9904      	ldr	r1, [sp, #16]
 8005528:	428b      	cmp	r3, r1
 800552a:	da6a      	bge.n	8005602 <__kernel_rem_pio2+0x352>
 800552c:	2a00      	cmp	r2, #0
 800552e:	f000 8088 	beq.w	8005642 <__kernel_rem_pio2+0x392>
 8005532:	ab0e      	add	r3, sp, #56	; 0x38
 8005534:	f1aa 0a18 	sub.w	sl, sl, #24
 8005538:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80b4 	beq.w	80056aa <__kernel_rem_pio2+0x3fa>
 8005542:	4650      	mov	r0, sl
 8005544:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80055d0 <__kernel_rem_pio2+0x320>
 8005548:	f000 fb3a 	bl	8005bc0 <scalbn>
 800554c:	00ec      	lsls	r4, r5, #3
 800554e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005550:	191e      	adds	r6, r3, r4
 8005552:	ec59 8b10 	vmov	r8, r9, d0
 8005556:	f106 0a08 	add.w	sl, r6, #8
 800555a:	462f      	mov	r7, r5
 800555c:	2f00      	cmp	r7, #0
 800555e:	f280 80df 	bge.w	8005720 <__kernel_rem_pio2+0x470>
 8005562:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80055c8 <__kernel_rem_pio2+0x318>
 8005566:	f04f 0a00 	mov.w	sl, #0
 800556a:	eba5 030a 	sub.w	r3, r5, sl
 800556e:	2b00      	cmp	r3, #0
 8005570:	f2c0 810a 	blt.w	8005788 <__kernel_rem_pio2+0x4d8>
 8005574:	f8df b078 	ldr.w	fp, [pc, #120]	; 80055f0 <__kernel_rem_pio2+0x340>
 8005578:	ec59 8b18 	vmov	r8, r9, d8
 800557c:	2700      	movs	r7, #0
 800557e:	e0f5      	b.n	800576c <__kernel_rem_pio2+0x4bc>
 8005580:	2302      	movs	r3, #2
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	e760      	b.n	8005448 <__kernel_rem_pio2+0x198>
 8005586:	ab0e      	add	r3, sp, #56	; 0x38
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	b94d      	cbnz	r5, 80055a2 <__kernel_rem_pio2+0x2f2>
 800558e:	b12b      	cbz	r3, 800559c <__kernel_rem_pio2+0x2ec>
 8005590:	a80e      	add	r0, sp, #56	; 0x38
 8005592:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005596:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800559a:	2301      	movs	r3, #1
 800559c:	3201      	adds	r2, #1
 800559e:	461d      	mov	r5, r3
 80055a0:	e759      	b.n	8005456 <__kernel_rem_pio2+0x1a6>
 80055a2:	a80e      	add	r0, sp, #56	; 0x38
 80055a4:	1acb      	subs	r3, r1, r3
 80055a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80055aa:	462b      	mov	r3, r5
 80055ac:	e7f6      	b.n	800559c <__kernel_rem_pio2+0x2ec>
 80055ae:	1e62      	subs	r2, r4, #1
 80055b0:	ab0e      	add	r3, sp, #56	; 0x38
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80055ba:	a90e      	add	r1, sp, #56	; 0x38
 80055bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055c0:	e757      	b.n	8005472 <__kernel_rem_pio2+0x1c2>
 80055c2:	bf00      	nop
 80055c4:	f3af 8000 	nop.w
	...
 80055d4:	3ff00000 	.word	0x3ff00000
 80055d8:	08005ed0 	.word	0x08005ed0
 80055dc:	40200000 	.word	0x40200000
 80055e0:	3ff00000 	.word	0x3ff00000
 80055e4:	3e700000 	.word	0x3e700000
 80055e8:	41700000 	.word	0x41700000
 80055ec:	3fe00000 	.word	0x3fe00000
 80055f0:	08005e90 	.word	0x08005e90
 80055f4:	1e62      	subs	r2, r4, #1
 80055f6:	ab0e      	add	r3, sp, #56	; 0x38
 80055f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005600:	e7db      	b.n	80055ba <__kernel_rem_pio2+0x30a>
 8005602:	a90e      	add	r1, sp, #56	; 0x38
 8005604:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005608:	3b01      	subs	r3, #1
 800560a:	430a      	orrs	r2, r1
 800560c:	e78b      	b.n	8005526 <__kernel_rem_pio2+0x276>
 800560e:	3301      	adds	r3, #1
 8005610:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005614:	2900      	cmp	r1, #0
 8005616:	d0fa      	beq.n	800560e <__kernel_rem_pio2+0x35e>
 8005618:	9a08      	ldr	r2, [sp, #32]
 800561a:	4422      	add	r2, r4
 800561c:	00d2      	lsls	r2, r2, #3
 800561e:	a922      	add	r1, sp, #136	; 0x88
 8005620:	18e3      	adds	r3, r4, r3
 8005622:	9206      	str	r2, [sp, #24]
 8005624:	440a      	add	r2, r1
 8005626:	9302      	str	r3, [sp, #8]
 8005628:	f10b 0108 	add.w	r1, fp, #8
 800562c:	f102 0308 	add.w	r3, r2, #8
 8005630:	1c66      	adds	r6, r4, #1
 8005632:	910a      	str	r1, [sp, #40]	; 0x28
 8005634:	2500      	movs	r5, #0
 8005636:	930d      	str	r3, [sp, #52]	; 0x34
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	42b3      	cmp	r3, r6
 800563c:	da04      	bge.n	8005648 <__kernel_rem_pio2+0x398>
 800563e:	461c      	mov	r4, r3
 8005640:	e6a6      	b.n	8005390 <__kernel_rem_pio2+0xe0>
 8005642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005644:	2301      	movs	r3, #1
 8005646:	e7e3      	b.n	8005610 <__kernel_rem_pio2+0x360>
 8005648:	9b06      	ldr	r3, [sp, #24]
 800564a:	18ef      	adds	r7, r5, r3
 800564c:	ab22      	add	r3, sp, #136	; 0x88
 800564e:	441f      	add	r7, r3
 8005650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005652:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005656:	f7fa ff11 	bl	800047c <__aeabi_i2d>
 800565a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800565c:	461c      	mov	r4, r3
 800565e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005660:	e9c7 0100 	strd	r0, r1, [r7]
 8005664:	eb03 0b05 	add.w	fp, r3, r5
 8005668:	2700      	movs	r7, #0
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	9b07      	ldr	r3, [sp, #28]
 8005674:	429f      	cmp	r7, r3
 8005676:	dd08      	ble.n	800568a <__kernel_rem_pio2+0x3da>
 8005678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800567a:	aa72      	add	r2, sp, #456	; 0x1c8
 800567c:	18eb      	adds	r3, r5, r3
 800567e:	4413      	add	r3, r2
 8005680:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005684:	3601      	adds	r6, #1
 8005686:	3508      	adds	r5, #8
 8005688:	e7d6      	b.n	8005638 <__kernel_rem_pio2+0x388>
 800568a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800568e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005692:	f7fa ff5d 	bl	8000550 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fa fda1 	bl	80001e4 <__adddf3>
 80056a2:	3701      	adds	r7, #1
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	e7e3      	b.n	8005672 <__kernel_rem_pio2+0x3c2>
 80056aa:	3d01      	subs	r5, #1
 80056ac:	e741      	b.n	8005532 <__kernel_rem_pio2+0x282>
 80056ae:	f1ca 0000 	rsb	r0, sl, #0
 80056b2:	ec47 6b10 	vmov	d0, r6, r7
 80056b6:	f000 fa83 	bl	8005bc0 <scalbn>
 80056ba:	ec57 6b10 	vmov	r6, r7, d0
 80056be:	2200      	movs	r2, #0
 80056c0:	4b99      	ldr	r3, [pc, #612]	; (8005928 <__kernel_rem_pio2+0x678>)
 80056c2:	ee10 0a10 	vmov	r0, s0
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fb f9c8 	bl	8000a5c <__aeabi_dcmpge>
 80056cc:	b1f8      	cbz	r0, 800570e <__kernel_rem_pio2+0x45e>
 80056ce:	2200      	movs	r2, #0
 80056d0:	4b96      	ldr	r3, [pc, #600]	; (800592c <__kernel_rem_pio2+0x67c>)
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa ff3b 	bl	8000550 <__aeabi_dmul>
 80056da:	f7fb f9d3 	bl	8000a84 <__aeabi_d2iz>
 80056de:	4680      	mov	r8, r0
 80056e0:	f7fa fecc 	bl	800047c <__aeabi_i2d>
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b90      	ldr	r3, [pc, #576]	; (8005928 <__kernel_rem_pio2+0x678>)
 80056e8:	f7fa ff32 	bl	8000550 <__aeabi_dmul>
 80056ec:	460b      	mov	r3, r1
 80056ee:	4602      	mov	r2, r0
 80056f0:	4639      	mov	r1, r7
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7fa fd74 	bl	80001e0 <__aeabi_dsub>
 80056f8:	f7fb f9c4 	bl	8000a84 <__aeabi_d2iz>
 80056fc:	1c65      	adds	r5, r4, #1
 80056fe:	ab0e      	add	r3, sp, #56	; 0x38
 8005700:	f10a 0a18 	add.w	sl, sl, #24
 8005704:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005708:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800570c:	e719      	b.n	8005542 <__kernel_rem_pio2+0x292>
 800570e:	4630      	mov	r0, r6
 8005710:	4639      	mov	r1, r7
 8005712:	f7fb f9b7 	bl	8000a84 <__aeabi_d2iz>
 8005716:	ab0e      	add	r3, sp, #56	; 0x38
 8005718:	4625      	mov	r5, r4
 800571a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800571e:	e710      	b.n	8005542 <__kernel_rem_pio2+0x292>
 8005720:	ab0e      	add	r3, sp, #56	; 0x38
 8005722:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005726:	f7fa fea9 	bl	800047c <__aeabi_i2d>
 800572a:	4642      	mov	r2, r8
 800572c:	464b      	mov	r3, r9
 800572e:	f7fa ff0f 	bl	8000550 <__aeabi_dmul>
 8005732:	2200      	movs	r2, #0
 8005734:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005738:	4b7c      	ldr	r3, [pc, #496]	; (800592c <__kernel_rem_pio2+0x67c>)
 800573a:	4640      	mov	r0, r8
 800573c:	4649      	mov	r1, r9
 800573e:	f7fa ff07 	bl	8000550 <__aeabi_dmul>
 8005742:	3f01      	subs	r7, #1
 8005744:	4680      	mov	r8, r0
 8005746:	4689      	mov	r9, r1
 8005748:	e708      	b.n	800555c <__kernel_rem_pio2+0x2ac>
 800574a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005756:	f7fa fefb 	bl	8000550 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f7fa fd3f 	bl	80001e4 <__adddf3>
 8005766:	3701      	adds	r7, #1
 8005768:	4680      	mov	r8, r0
 800576a:	4689      	mov	r9, r1
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	429f      	cmp	r7, r3
 8005770:	dc01      	bgt.n	8005776 <__kernel_rem_pio2+0x4c6>
 8005772:	45ba      	cmp	sl, r7
 8005774:	dae9      	bge.n	800574a <__kernel_rem_pio2+0x49a>
 8005776:	ab4a      	add	r3, sp, #296	; 0x128
 8005778:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800577c:	e9c3 8900 	strd	r8, r9, [r3]
 8005780:	f10a 0a01 	add.w	sl, sl, #1
 8005784:	3e08      	subs	r6, #8
 8005786:	e6f0      	b.n	800556a <__kernel_rem_pio2+0x2ba>
 8005788:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800578a:	2b03      	cmp	r3, #3
 800578c:	d85b      	bhi.n	8005846 <__kernel_rem_pio2+0x596>
 800578e:	e8df f003 	tbb	[pc, r3]
 8005792:	264a      	.short	0x264a
 8005794:	0226      	.short	0x0226
 8005796:	ab9a      	add	r3, sp, #616	; 0x268
 8005798:	441c      	add	r4, r3
 800579a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800579e:	46a2      	mov	sl, r4
 80057a0:	46ab      	mov	fp, r5
 80057a2:	f1bb 0f00 	cmp.w	fp, #0
 80057a6:	dc6c      	bgt.n	8005882 <__kernel_rem_pio2+0x5d2>
 80057a8:	46a2      	mov	sl, r4
 80057aa:	46ab      	mov	fp, r5
 80057ac:	f1bb 0f01 	cmp.w	fp, #1
 80057b0:	f300 8086 	bgt.w	80058c0 <__kernel_rem_pio2+0x610>
 80057b4:	2000      	movs	r0, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	2d01      	cmp	r5, #1
 80057ba:	f300 80a0 	bgt.w	80058fe <__kernel_rem_pio2+0x64e>
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80057c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 809e 	bne.w	800590a <__kernel_rem_pio2+0x65a>
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	e9c3 7800 	strd	r7, r8, [r3]
 80057d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80057d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80057dc:	e033      	b.n	8005846 <__kernel_rem_pio2+0x596>
 80057de:	3408      	adds	r4, #8
 80057e0:	ab4a      	add	r3, sp, #296	; 0x128
 80057e2:	441c      	add	r4, r3
 80057e4:	462e      	mov	r6, r5
 80057e6:	2000      	movs	r0, #0
 80057e8:	2100      	movs	r1, #0
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	da3a      	bge.n	8005864 <__kernel_rem_pio2+0x5b4>
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d03d      	beq.n	8005870 <__kernel_rem_pio2+0x5c0>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057fa:	9c01      	ldr	r4, [sp, #4]
 80057fc:	e9c4 2300 	strd	r2, r3, [r4]
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005808:	f7fa fcea 	bl	80001e0 <__aeabi_dsub>
 800580c:	ae4c      	add	r6, sp, #304	; 0x130
 800580e:	2401      	movs	r4, #1
 8005810:	42a5      	cmp	r5, r4
 8005812:	da30      	bge.n	8005876 <__kernel_rem_pio2+0x5c6>
 8005814:	9b02      	ldr	r3, [sp, #8]
 8005816:	b113      	cbz	r3, 800581e <__kernel_rem_pio2+0x56e>
 8005818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800581c:	4619      	mov	r1, r3
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005824:	e00f      	b.n	8005846 <__kernel_rem_pio2+0x596>
 8005826:	ab9a      	add	r3, sp, #616	; 0x268
 8005828:	441c      	add	r4, r3
 800582a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800582e:	2000      	movs	r0, #0
 8005830:	2100      	movs	r1, #0
 8005832:	2d00      	cmp	r5, #0
 8005834:	da10      	bge.n	8005858 <__kernel_rem_pio2+0x5a8>
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	b113      	cbz	r3, 8005840 <__kernel_rem_pio2+0x590>
 800583a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800583e:	4619      	mov	r1, r3
 8005840:	9b01      	ldr	r3, [sp, #4]
 8005842:	e9c3 0100 	strd	r0, r1, [r3]
 8005846:	9b06      	ldr	r3, [sp, #24]
 8005848:	f003 0007 	and.w	r0, r3, #7
 800584c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005850:	ecbd 8b02 	vpop	{d8}
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005858:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800585c:	f7fa fcc2 	bl	80001e4 <__adddf3>
 8005860:	3d01      	subs	r5, #1
 8005862:	e7e6      	b.n	8005832 <__kernel_rem_pio2+0x582>
 8005864:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005868:	f7fa fcbc 	bl	80001e4 <__adddf3>
 800586c:	3e01      	subs	r6, #1
 800586e:	e7bc      	b.n	80057ea <__kernel_rem_pio2+0x53a>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	e7c1      	b.n	80057fa <__kernel_rem_pio2+0x54a>
 8005876:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800587a:	f7fa fcb3 	bl	80001e4 <__adddf3>
 800587e:	3401      	adds	r4, #1
 8005880:	e7c6      	b.n	8005810 <__kernel_rem_pio2+0x560>
 8005882:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005886:	ed3a 7b02 	vldmdb	sl!, {d7}
 800588a:	4640      	mov	r0, r8
 800588c:	ec53 2b17 	vmov	r2, r3, d7
 8005890:	4649      	mov	r1, r9
 8005892:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005896:	f7fa fca5 	bl	80001e4 <__adddf3>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	4640      	mov	r0, r8
 80058a4:	4649      	mov	r1, r9
 80058a6:	f7fa fc9b 	bl	80001e0 <__aeabi_dsub>
 80058aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ae:	f7fa fc99 	bl	80001e4 <__adddf3>
 80058b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058b6:	e9ca 0100 	strd	r0, r1, [sl]
 80058ba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80058be:	e770      	b.n	80057a2 <__kernel_rem_pio2+0x4f2>
 80058c0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80058c4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80058c8:	4630      	mov	r0, r6
 80058ca:	ec53 2b17 	vmov	r2, r3, d7
 80058ce:	4639      	mov	r1, r7
 80058d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058d4:	f7fa fc86 	bl	80001e4 <__adddf3>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4680      	mov	r8, r0
 80058de:	4689      	mov	r9, r1
 80058e0:	4630      	mov	r0, r6
 80058e2:	4639      	mov	r1, r7
 80058e4:	f7fa fc7c 	bl	80001e0 <__aeabi_dsub>
 80058e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ec:	f7fa fc7a 	bl	80001e4 <__adddf3>
 80058f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058f4:	e9ca 0100 	strd	r0, r1, [sl]
 80058f8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80058fc:	e756      	b.n	80057ac <__kernel_rem_pio2+0x4fc>
 80058fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005902:	f7fa fc6f 	bl	80001e4 <__adddf3>
 8005906:	3d01      	subs	r5, #1
 8005908:	e756      	b.n	80057b8 <__kernel_rem_pio2+0x508>
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	9a01      	ldr	r2, [sp, #4]
 800590e:	601f      	str	r7, [r3, #0]
 8005910:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005914:	605c      	str	r4, [r3, #4]
 8005916:	609d      	str	r5, [r3, #8]
 8005918:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800591c:	60d3      	str	r3, [r2, #12]
 800591e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005922:	6110      	str	r0, [r2, #16]
 8005924:	6153      	str	r3, [r2, #20]
 8005926:	e78e      	b.n	8005846 <__kernel_rem_pio2+0x596>
 8005928:	41700000 	.word	0x41700000
 800592c:	3e700000 	.word	0x3e700000

08005930 <__kernel_sin>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ec55 4b10 	vmov	r4, r5, d0
 8005938:	b085      	sub	sp, #20
 800593a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800593e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005942:	ed8d 1b00 	vstr	d1, [sp]
 8005946:	9002      	str	r0, [sp, #8]
 8005948:	da06      	bge.n	8005958 <__kernel_sin+0x28>
 800594a:	ee10 0a10 	vmov	r0, s0
 800594e:	4629      	mov	r1, r5
 8005950:	f7fb f898 	bl	8000a84 <__aeabi_d2iz>
 8005954:	2800      	cmp	r0, #0
 8005956:	d051      	beq.n	80059fc <__kernel_sin+0xcc>
 8005958:	4622      	mov	r2, r4
 800595a:	462b      	mov	r3, r5
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fdf6 	bl	8000550 <__aeabi_dmul>
 8005964:	4682      	mov	sl, r0
 8005966:	468b      	mov	fp, r1
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4620      	mov	r0, r4
 800596e:	4629      	mov	r1, r5
 8005970:	f7fa fdee 	bl	8000550 <__aeabi_dmul>
 8005974:	a341      	add	r3, pc, #260	; (adr r3, 8005a7c <__kernel_sin+0x14c>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	4680      	mov	r8, r0
 800597c:	4689      	mov	r9, r1
 800597e:	4650      	mov	r0, sl
 8005980:	4659      	mov	r1, fp
 8005982:	f7fa fde5 	bl	8000550 <__aeabi_dmul>
 8005986:	a33f      	add	r3, pc, #252	; (adr r3, 8005a84 <__kernel_sin+0x154>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc28 	bl	80001e0 <__aeabi_dsub>
 8005990:	4652      	mov	r2, sl
 8005992:	465b      	mov	r3, fp
 8005994:	f7fa fddc 	bl	8000550 <__aeabi_dmul>
 8005998:	a33c      	add	r3, pc, #240	; (adr r3, 8005a8c <__kernel_sin+0x15c>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fc21 	bl	80001e4 <__adddf3>
 80059a2:	4652      	mov	r2, sl
 80059a4:	465b      	mov	r3, fp
 80059a6:	f7fa fdd3 	bl	8000550 <__aeabi_dmul>
 80059aa:	a33a      	add	r3, pc, #232	; (adr r3, 8005a94 <__kernel_sin+0x164>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc16 	bl	80001e0 <__aeabi_dsub>
 80059b4:	4652      	mov	r2, sl
 80059b6:	465b      	mov	r3, fp
 80059b8:	f7fa fdca 	bl	8000550 <__aeabi_dmul>
 80059bc:	a337      	add	r3, pc, #220	; (adr r3, 8005a9c <__kernel_sin+0x16c>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fc0f 	bl	80001e4 <__adddf3>
 80059c6:	9b02      	ldr	r3, [sp, #8]
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	b9db      	cbnz	r3, 8005a06 <__kernel_sin+0xd6>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4650      	mov	r0, sl
 80059d4:	4659      	mov	r1, fp
 80059d6:	f7fa fdbb 	bl	8000550 <__aeabi_dmul>
 80059da:	a325      	add	r3, pc, #148	; (adr r3, 8005a70 <__kernel_sin+0x140>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fbfe 	bl	80001e0 <__aeabi_dsub>
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	f7fa fdb2 	bl	8000550 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fbf6 	bl	80001e4 <__adddf3>
 80059f8:	4604      	mov	r4, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	ec45 4b10 	vmov	d0, r4, r5
 8005a00:	b005      	add	sp, #20
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	2200      	movs	r2, #0
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <__kernel_sin+0x148>)
 8005a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a0e:	f7fa fd9f 	bl	8000550 <__aeabi_dmul>
 8005a12:	4632      	mov	r2, r6
 8005a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a18:	463b      	mov	r3, r7
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fd97 	bl	8000550 <__aeabi_dmul>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2a:	f7fa fbd9 	bl	80001e0 <__aeabi_dsub>
 8005a2e:	4652      	mov	r2, sl
 8005a30:	465b      	mov	r3, fp
 8005a32:	f7fa fd8d 	bl	8000550 <__aeabi_dmul>
 8005a36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a3a:	f7fa fbd1 	bl	80001e0 <__aeabi_dsub>
 8005a3e:	a30c      	add	r3, pc, #48	; (adr r3, 8005a70 <__kernel_sin+0x140>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	4640      	mov	r0, r8
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	f7fa fd80 	bl	8000550 <__aeabi_dmul>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa fbc4 	bl	80001e4 <__adddf3>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4620      	mov	r0, r4
 8005a62:	4629      	mov	r1, r5
 8005a64:	f7fa fbbc 	bl	80001e0 <__aeabi_dsub>
 8005a68:	e7c6      	b.n	80059f8 <__kernel_sin+0xc8>
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w
 8005a70:	55555549 	.word	0x55555549
 8005a74:	3fc55555 	.word	0x3fc55555
 8005a78:	3fe00000 	.word	0x3fe00000
 8005a7c:	5acfd57c 	.word	0x5acfd57c
 8005a80:	3de5d93a 	.word	0x3de5d93a
 8005a84:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a88:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a8c:	57b1fe7d 	.word	0x57b1fe7d
 8005a90:	3ec71de3 	.word	0x3ec71de3
 8005a94:	19c161d5 	.word	0x19c161d5
 8005a98:	3f2a01a0 	.word	0x3f2a01a0
 8005a9c:	1110f8a6 	.word	0x1110f8a6
 8005aa0:	3f811111 	.word	0x3f811111

08005aa4 <fabs>:
 8005aa4:	ec51 0b10 	vmov	r0, r1, d0
 8005aa8:	ee10 2a10 	vmov	r2, s0
 8005aac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ab0:	ec43 2b10 	vmov	d0, r2, r3
 8005ab4:	4770      	bx	lr
	...

08005ab8 <floor>:
 8005ab8:	ec51 0b10 	vmov	r0, r1, d0
 8005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ac4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ac8:	2e13      	cmp	r6, #19
 8005aca:	460c      	mov	r4, r1
 8005acc:	ee10 5a10 	vmov	r5, s0
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	dc34      	bgt.n	8005b3e <floor+0x86>
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	da16      	bge.n	8005b06 <floor+0x4e>
 8005ad8:	a335      	add	r3, pc, #212	; (adr r3, 8005bb0 <floor+0xf8>)
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f7fa fb81 	bl	80001e4 <__adddf3>
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f7fa ffc3 	bl	8000a70 <__aeabi_dcmpgt>
 8005aea:	b148      	cbz	r0, 8005b00 <floor+0x48>
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	da59      	bge.n	8005ba4 <floor+0xec>
 8005af0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005af4:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <floor+0x100>)
 8005af6:	432b      	orrs	r3, r5
 8005af8:	2500      	movs	r5, #0
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	bf18      	it	ne
 8005afe:	4614      	movne	r4, r2
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	e025      	b.n	8005b52 <floor+0x9a>
 8005b06:	4f2d      	ldr	r7, [pc, #180]	; (8005bbc <floor+0x104>)
 8005b08:	4137      	asrs	r7, r6
 8005b0a:	ea01 0307 	and.w	r3, r1, r7
 8005b0e:	4303      	orrs	r3, r0
 8005b10:	d01f      	beq.n	8005b52 <floor+0x9a>
 8005b12:	a327      	add	r3, pc, #156	; (adr r3, 8005bb0 <floor+0xf8>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fb64 	bl	80001e4 <__adddf3>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f7fa ffa6 	bl	8000a70 <__aeabi_dcmpgt>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0eb      	beq.n	8005b00 <floor+0x48>
 8005b28:	2c00      	cmp	r4, #0
 8005b2a:	bfbe      	ittt	lt
 8005b2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b30:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b34:	19a4      	addlt	r4, r4, r6
 8005b36:	ea24 0407 	bic.w	r4, r4, r7
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	e7e0      	b.n	8005b00 <floor+0x48>
 8005b3e:	2e33      	cmp	r6, #51	; 0x33
 8005b40:	dd0b      	ble.n	8005b5a <floor+0xa2>
 8005b42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005b46:	d104      	bne.n	8005b52 <floor+0x9a>
 8005b48:	ee10 2a10 	vmov	r2, s0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	f7fa fb49 	bl	80001e4 <__adddf3>
 8005b52:	ec41 0b10 	vmov	d0, r0, r1
 8005b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	fa23 f707 	lsr.w	r7, r3, r7
 8005b66:	4207      	tst	r7, r0
 8005b68:	d0f3      	beq.n	8005b52 <floor+0x9a>
 8005b6a:	a311      	add	r3, pc, #68	; (adr r3, 8005bb0 <floor+0xf8>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fb38 	bl	80001e4 <__adddf3>
 8005b74:	2200      	movs	r2, #0
 8005b76:	2300      	movs	r3, #0
 8005b78:	f7fa ff7a 	bl	8000a70 <__aeabi_dcmpgt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d0bf      	beq.n	8005b00 <floor+0x48>
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	da02      	bge.n	8005b8a <floor+0xd2>
 8005b84:	2e14      	cmp	r6, #20
 8005b86:	d103      	bne.n	8005b90 <floor+0xd8>
 8005b88:	3401      	adds	r4, #1
 8005b8a:	ea25 0507 	bic.w	r5, r5, r7
 8005b8e:	e7b7      	b.n	8005b00 <floor+0x48>
 8005b90:	2301      	movs	r3, #1
 8005b92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005b96:	fa03 f606 	lsl.w	r6, r3, r6
 8005b9a:	4435      	add	r5, r6
 8005b9c:	4545      	cmp	r5, r8
 8005b9e:	bf38      	it	cc
 8005ba0:	18e4      	addcc	r4, r4, r3
 8005ba2:	e7f2      	b.n	8005b8a <floor+0xd2>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	462c      	mov	r4, r5
 8005ba8:	e7aa      	b.n	8005b00 <floor+0x48>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	bff00000 	.word	0xbff00000
 8005bbc:	000fffff 	.word	0x000fffff

08005bc0 <scalbn>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	ec55 4b10 	vmov	r4, r5, d0
 8005bc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005bca:	4606      	mov	r6, r0
 8005bcc:	462b      	mov	r3, r5
 8005bce:	b9aa      	cbnz	r2, 8005bfc <scalbn+0x3c>
 8005bd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bd4:	4323      	orrs	r3, r4
 8005bd6:	d03b      	beq.n	8005c50 <scalbn+0x90>
 8005bd8:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <scalbn+0xe0>)
 8005bda:	4629      	mov	r1, r5
 8005bdc:	2200      	movs	r2, #0
 8005bde:	ee10 0a10 	vmov	r0, s0
 8005be2:	f7fa fcb5 	bl	8000550 <__aeabi_dmul>
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <scalbn+0xe4>)
 8005be8:	429e      	cmp	r6, r3
 8005bea:	4604      	mov	r4, r0
 8005bec:	460d      	mov	r5, r1
 8005bee:	da12      	bge.n	8005c16 <scalbn+0x56>
 8005bf0:	a327      	add	r3, pc, #156	; (adr r3, 8005c90 <scalbn+0xd0>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fcab 	bl	8000550 <__aeabi_dmul>
 8005bfa:	e009      	b.n	8005c10 <scalbn+0x50>
 8005bfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d10c      	bne.n	8005c1e <scalbn+0x5e>
 8005c04:	ee10 2a10 	vmov	r2, s0
 8005c08:	4620      	mov	r0, r4
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	f7fa faea 	bl	80001e4 <__adddf3>
 8005c10:	4604      	mov	r4, r0
 8005c12:	460d      	mov	r5, r1
 8005c14:	e01c      	b.n	8005c50 <scalbn+0x90>
 8005c16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	3a36      	subs	r2, #54	; 0x36
 8005c1e:	4432      	add	r2, r6
 8005c20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c24:	428a      	cmp	r2, r1
 8005c26:	dd0b      	ble.n	8005c40 <scalbn+0x80>
 8005c28:	ec45 4b11 	vmov	d1, r4, r5
 8005c2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005c98 <scalbn+0xd8>
 8005c30:	f000 f83c 	bl	8005cac <copysign>
 8005c34:	a318      	add	r3, pc, #96	; (adr r3, 8005c98 <scalbn+0xd8>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	ec51 0b10 	vmov	r0, r1, d0
 8005c3e:	e7da      	b.n	8005bf6 <scalbn+0x36>
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	dd08      	ble.n	8005c56 <scalbn+0x96>
 8005c44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c50:	ec45 4b10 	vmov	d0, r4, r5
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c5a:	da0d      	bge.n	8005c78 <scalbn+0xb8>
 8005c5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c60:	429e      	cmp	r6, r3
 8005c62:	ec45 4b11 	vmov	d1, r4, r5
 8005c66:	dce1      	bgt.n	8005c2c <scalbn+0x6c>
 8005c68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005c90 <scalbn+0xd0>
 8005c6c:	f000 f81e 	bl	8005cac <copysign>
 8005c70:	a307      	add	r3, pc, #28	; (adr r3, 8005c90 <scalbn+0xd0>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	e7e0      	b.n	8005c3a <scalbn+0x7a>
 8005c78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c7c:	3236      	adds	r2, #54	; 0x36
 8005c7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <scalbn+0xe8>)
 8005c8e:	e7b2      	b.n	8005bf6 <scalbn+0x36>
 8005c90:	c2f8f359 	.word	0xc2f8f359
 8005c94:	01a56e1f 	.word	0x01a56e1f
 8005c98:	8800759c 	.word	0x8800759c
 8005c9c:	7e37e43c 	.word	0x7e37e43c
 8005ca0:	43500000 	.word	0x43500000
 8005ca4:	ffff3cb0 	.word	0xffff3cb0
 8005ca8:	3c900000 	.word	0x3c900000

08005cac <copysign>:
 8005cac:	ec51 0b10 	vmov	r0, r1, d0
 8005cb0:	ee11 0a90 	vmov	r0, s3
 8005cb4:	ee10 2a10 	vmov	r2, s0
 8005cb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005cc0:	ea41 0300 	orr.w	r3, r1, r0
 8005cc4:	ec43 2b10 	vmov	d0, r2, r3
 8005cc8:	4770      	bx	lr
	...

08005ccc <_init>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr

08005cd8 <_fini>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr
